{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Quarters Welcome to the Quarters documentation! Quarters is a universal cryptocurrency for games. This document includes SDK, APIs and code snippets. With them, you can easily integrate Quarters tokens to your games. If you feel like contributing to the docs, like changing or adding things, feel free to submit a Pull Request at https://github.com/weiks/quarters-docs For our website visit Pocketful of Quarters . \u00bb For a quick video on how to get started with Quarters, click here ! Alternatively if you are not a developer and accidentally got here watch a video on How to buy Quarters , or visit our website Pocketful of Quarters . Development tools and library Here is the list of tools and libraries quarters project provides to get started. Quarters contract Quarters contract is Ethereum smart contract and written in solidity. It includes ERC20 token and withdraw functions. You can check code and ABI here on etherscan. Mainnet: [Yet to be deployed] Ropsten: 0x8c05ebef0b4419416e8efb4c26edb4aa6cd7bb27 Quarters buttons Quarters buttons are small snippets. It is easy and fastest way to integrate \"Play with Quarters\" feature on game. Here is quick setup to embed buttons on any web based game to accept Quarters. script src = https://pocketfulofquarters.com/embeds/button.js data-script-name = quarters-embeds data-app-id = APP-ID data-app-key = APP-KEY charset = utf-8 / script button class = buy-quarters-button data-widget-type = button data-order-code = 1 data-amount = 2 Play with 2 Quarters / button To check complete documentation, visit Quarters Buttons . JavaScript SDK JavaScript SDK provides rich API interface to help build oauth on Quarters. Developers can use Quarters oauth to add authentication to the game and retrieve information for client-only games. npm install --save quarters-js To check complete documentation, visit JavaScript SDK . Node SDK (for server) Node SDK provides helpers to interact with Quarters server and contract. npm install --save node-quarters To check complete documentation, visit Node SDK . Unity SDK To check complete documentation, visit Unity SDK . Unity SDK - PlayFab Module PlayFab Module allows transferring quarters from the Quarters app to the users through PlayFab cloud script. To check complete documentation, visit Unity SDK - PlayFab Module .","title":"Introduction"},{"location":"#welcome-to-quarters","text":"Welcome to the Quarters documentation! Quarters is a universal cryptocurrency for games. This document includes SDK, APIs and code snippets. With them, you can easily integrate Quarters tokens to your games. If you feel like contributing to the docs, like changing or adding things, feel free to submit a Pull Request at https://github.com/weiks/quarters-docs For our website visit Pocketful of Quarters . \u00bb For a quick video on how to get started with Quarters, click here ! Alternatively if you are not a developer and accidentally got here watch a video on How to buy Quarters , or visit our website Pocketful of Quarters .","title":"Welcome to Quarters"},{"location":"#development-tools-and-library","text":"Here is the list of tools and libraries quarters project provides to get started. Quarters contract Quarters contract is Ethereum smart contract and written in solidity. It includes ERC20 token and withdraw functions. You can check code and ABI here on etherscan. Mainnet: [Yet to be deployed] Ropsten: 0x8c05ebef0b4419416e8efb4c26edb4aa6cd7bb27 Quarters buttons Quarters buttons are small snippets. It is easy and fastest way to integrate \"Play with Quarters\" feature on game. Here is quick setup to embed buttons on any web based game to accept Quarters. script src = https://pocketfulofquarters.com/embeds/button.js data-script-name = quarters-embeds data-app-id = APP-ID data-app-key = APP-KEY charset = utf-8 / script button class = buy-quarters-button data-widget-type = button data-order-code = 1 data-amount = 2 Play with 2 Quarters / button To check complete documentation, visit Quarters Buttons . JavaScript SDK JavaScript SDK provides rich API interface to help build oauth on Quarters. Developers can use Quarters oauth to add authentication to the game and retrieve information for client-only games. npm install --save quarters-js To check complete documentation, visit JavaScript SDK . Node SDK (for server) Node SDK provides helpers to interact with Quarters server and contract. npm install --save node-quarters To check complete documentation, visit Node SDK . Unity SDK To check complete documentation, visit Unity SDK . Unity SDK - PlayFab Module PlayFab Module allows transferring quarters from the Quarters app to the users through PlayFab cloud script. To check complete documentation, visit Unity SDK - PlayFab Module .","title":"Development tools and library"},{"location":"getting-started/","text":"Getting started Our API makes it easy to integrate Quarters into both new and existing game applications. Quarter's APIs enable a variety of capabilities; from simply gathering read-only data, to building something that's never been done before Capabilities: Create user account with Ethereum wallet and buy quarters Retrieve user account information, send transfer requests using oauth Retrieve historical price, tranche and supply information Accept and request quarters as a game developer We offer a variety of client libraries and server SDKs. Start with your first app There are two ways you can integrate Quarters in your game - Quarters buttons and using SDK. But to start with it, you will need to create app on Quarters platform. One can create multiple apps. \u00bb Create your first App API key authentication Follow Quarters Developer channels for updates If you can't find the answer to your question or need help, please explore and contact us through our dev support channels. To contact us about confidential or otherwise private information, email us at dev@pocketfulofquarters.com","title":"Getting started"},{"location":"getting-started/#getting-started","text":"Our API makes it easy to integrate Quarters into both new and existing game applications. Quarter's APIs enable a variety of capabilities; from simply gathering read-only data, to building something that's never been done before Capabilities: Create user account with Ethereum wallet and buy quarters Retrieve user account information, send transfer requests using oauth Retrieve historical price, tranche and supply information Accept and request quarters as a game developer We offer a variety of client libraries and server SDKs.","title":"Getting started"},{"location":"getting-started/#start-with-your-first-app","text":"There are two ways you can integrate Quarters in your game - Quarters buttons and using SDK. But to start with it, you will need to create app on Quarters platform. One can create multiple apps. \u00bb Create your first App","title":"Start with your first app"},{"location":"getting-started/#api-key-authentication","text":"","title":"API key authentication"},{"location":"getting-started/#follow-quarters-developer-channels-for-updates","text":"If you can't find the answer to your question or need help, please explore and contact us through our dev support channels. To contact us about confidential or otherwise private information, email us at dev@pocketfulofquarters.com","title":"Follow Quarters Developer channels for updates"},{"location":"quarters-buttons/","text":"Quarters Buttons Integrate Quarters on your website in an embedded window Sample Button Play with quarters Sample code When you create an quarters button, it will give you code like this example. button class = buy-quarters-button data-widget-type = button data-order-name = Sample docs data-order-description = Sample quarters transfer data-order-code = 1 data-amount = 5 data-button-size = medium data-button-type = black Play with quarters / button script src = https://pocketfulofquarters.com/embeds/button.js data-script-name = quarters-embeds data-app-id = KAYR7bXS3116XyV9vs6u data-app-key = qg05u8p50lof20z9y6b1jb6kf4hcfbdl charset = utf-8 / script How to create Quarters Button Quarters buttons can be generated via our button generator (shown below) once you create your first app The button generator is the easiest way to get started. This will create code like this. The only required parameter is amount . The rest can be set when you create the button or later via the data-* attributes in the embed HTML. data-* attributes will override any attributes you set in the button generator. Once a button is generated, you'll be given a few lines of HTML code to copy and paste into your website. This will add the button to your page. Buttons can be thought of as disposable (they are just a way to hard code a name and price into a code attribute) so if you mess up you can always start over with a new button. Integration Details A separate requestId is generated for each order and user. If a user is already signed in to a Quarters account, they can complete the checkout in two clicks - this is the fastest method of transfer. Once a transfers completes, a onQuartersCallback window function will be fired along with a code param referencing the same button. // Get quarters button callback wndow . onQuartersCallback = function ( data ) { if ( data . error ) { // data.message } else if ( data . cancel ) { // user canceled transfer } else { // data.txId = Ethereum transaction tx id // data.requestId = Request Id to get details about order (/v1/requests/:requestId) // data.order_code = reference to button `data-order-code` } } On successful transfer, following param will be generated: Parameter Description txId Ethereum transaction hash which you can use to validate confirmed transaction on blockchain requestId Order id which you can use to retrieve order details. Order details can be fetched using client_secret (server key) using Node SDK API: /v1/requests/:requestId order_code Order code. Same as code supplied using data-order-code . Used when multiple buttons are there on a page to identify order. Advanced Options Customizing the Embed HTML The embed html consists of one script tag referencing https://pocketfulofquarters.com/embeds/button.js and an element with class buy-quarters-button with data-widget-type='button' . You can have one or more elements with class buy-quarters-button on the page (if you\u2019re including multiple buttons), but only one script tag is ever needed. After adding the buy-quarters-button class, the only required parameters are data-amount and data-widget-type . The other params can be updated after the button is created by setting data-* attributes on the element. This makes it easy to update fields without having to create a new button. The div can have the following params: Field Description data-amount Required Integer amount of quarters for order. data-button-size Optional one of medium , large or small . These different button styles can be previewed in the button generator. Default is medium . data-button-type Optional one of black , green , red or grey . These different button types can be previewed in the button generator. Default is black . data-order-name Optional Order name which will be shown to user. data-order-code Optional Unique code per page. It will be used to identify multiple orders on same page.","title":"Quarters buttons"},{"location":"quarters-buttons/#quarters-buttons","text":"","title":"Quarters Buttons"},{"location":"quarters-buttons/#integrate-quarters-on-your-website-in-an-embedded-window","text":"Sample Button Play with quarters Sample code When you create an quarters button, it will give you code like this example. button class = buy-quarters-button data-widget-type = button data-order-name = Sample docs data-order-description = Sample quarters transfer data-order-code = 1 data-amount = 5 data-button-size = medium data-button-type = black Play with quarters / button script src = https://pocketfulofquarters.com/embeds/button.js data-script-name = quarters-embeds data-app-id = KAYR7bXS3116XyV9vs6u data-app-key = qg05u8p50lof20z9y6b1jb6kf4hcfbdl charset = utf-8 / script","title":"Integrate Quarters on your website in an embedded window"},{"location":"quarters-buttons/#how-to-create-quarters-button","text":"Quarters buttons can be generated via our button generator (shown below) once you create your first app The button generator is the easiest way to get started. This will create code like this. The only required parameter is amount . The rest can be set when you create the button or later via the data-* attributes in the embed HTML. data-* attributes will override any attributes you set in the button generator. Once a button is generated, you'll be given a few lines of HTML code to copy and paste into your website. This will add the button to your page. Buttons can be thought of as disposable (they are just a way to hard code a name and price into a code attribute) so if you mess up you can always start over with a new button.","title":"How to create Quarters Button"},{"location":"quarters-buttons/#integration-details","text":"A separate requestId is generated for each order and user. If a user is already signed in to a Quarters account, they can complete the checkout in two clicks - this is the fastest method of transfer. Once a transfers completes, a onQuartersCallback window function will be fired along with a code param referencing the same button. // Get quarters button callback wndow . onQuartersCallback = function ( data ) { if ( data . error ) { // data.message } else if ( data . cancel ) { // user canceled transfer } else { // data.txId = Ethereum transaction tx id // data.requestId = Request Id to get details about order (/v1/requests/:requestId) // data.order_code = reference to button `data-order-code` } } On successful transfer, following param will be generated: Parameter Description txId Ethereum transaction hash which you can use to validate confirmed transaction on blockchain requestId Order id which you can use to retrieve order details. Order details can be fetched using client_secret (server key) using Node SDK API: /v1/requests/:requestId order_code Order code. Same as code supplied using data-order-code . Used when multiple buttons are there on a page to identify order.","title":"Integration Details"},{"location":"quarters-buttons/#advanced-options","text":"","title":"Advanced Options"},{"location":"quarters-buttons/#customizing-the-embed-html","text":"The embed html consists of one script tag referencing https://pocketfulofquarters.com/embeds/button.js and an element with class buy-quarters-button with data-widget-type='button' . You can have one or more elements with class buy-quarters-button on the page (if you\u2019re including multiple buttons), but only one script tag is ever needed. After adding the buy-quarters-button class, the only required parameters are data-amount and data-widget-type . The other params can be updated after the button is created by setting data-* attributes on the element. This makes it easy to update fields without having to create a new button. The div can have the following params: Field Description data-amount Required Integer amount of quarters for order. data-button-size Optional one of medium , large or small . These different button styles can be previewed in the button generator. Default is medium . data-button-type Optional one of black , green , red or grey . These different button types can be previewed in the button generator. Default is black . data-order-name Optional Order name which will be shown to user. data-order-code Optional Unique code per page. It will be used to identify multiple orders on same page.","title":"Customizing the Embed HTML"},{"location":"apis/iap/","text":"IAP APIs - In App Purchases Receipt Verification Quarters IAP APIs allows for a very simple way for developers to integrate In App Purchases Receipt Validation for Apple, Google and Unity. Quarters are automatically transferred to associated users with the receipt if the IAP receipts are valid. Supported platforms : Apple, Google, Unity ( currently only available on Beta API ). The first thing you'll need to do is sign up for Quarters to create an app and then set Google Public Key and Apple Shared Secret on app settings. Unity POST https://api.dev.pocketfulofquarters.com/v1/apps/{appId}/verifyReceipt/unity with following url params: Url params Description appId Required App id. with following headers: Parameter Description Authorization Required Bearer SERVER-API-KEY Server API key which you received after app registrations with following parameters: Parameter Description receipt Required IAP Receipt to be validated user Required Buyer id Request example: curl https :// api . dev . pocketfulofquarters . com / v1 / apps / { appId } / verifyReceipt / unity \\ -X POST \\ -H Authorization: Bearer foo...bar \\ -H Content-Type: application/json;charset=UTF-8 \\ --data-binary { receipt : {...}, user : buyerId } Response example: { txId : 0xdf00...0f0f } This will yield following response: Field Description txId Ethereum transaction hash of quarters transfers","title":"IAP"},{"location":"apis/iap/#iap-apis-in-app-purchases-receipt-verification","text":"Quarters IAP APIs allows for a very simple way for developers to integrate In App Purchases Receipt Validation for Apple, Google and Unity. Quarters are automatically transferred to associated users with the receipt if the IAP receipts are valid. Supported platforms : Apple, Google, Unity ( currently only available on Beta API ). The first thing you'll need to do is sign up for Quarters to create an app and then set Google Public Key and Apple Shared Secret on app settings.","title":"IAP APIs - In App Purchases Receipt Verification"},{"location":"apis/iap/#unity","text":"POST https://api.dev.pocketfulofquarters.com/v1/apps/{appId}/verifyReceipt/unity with following url params: Url params Description appId Required App id. with following headers: Parameter Description Authorization Required Bearer SERVER-API-KEY Server API key which you received after app registrations with following parameters: Parameter Description receipt Required IAP Receipt to be validated user Required Buyer id Request example: curl https :// api . dev . pocketfulofquarters . com / v1 / apps / { appId } / verifyReceipt / unity \\ -X POST \\ -H Authorization: Bearer foo...bar \\ -H Content-Type: application/json;charset=UTF-8 \\ --data-binary { receipt : {...}, user : buyerId } Response example: { txId : 0xdf00...0f0f } This will yield following response: Field Description txId Ethereum transaction hash of quarters transfers","title":"Unity"},{"location":"apis/oauth/","text":"OAuth APIs OAuth APIS are standard OAuth2 APIs. Authorize URL : https://pocketfulofquarters.com/oauth/authorize Access Token URL : https://api.pocketfulofquarters.com/v1/oauth/token Authorize GET https://pocketfulofquarters.com/oauth/authorize?response_type=code client_id=YOUR_CLIENT_ID redirect_uri=YOUR_REDIRECT_URL inline=true Parameters: Parameter Description response_type Required Value code client_id Required The client ID you received after registering your application. inline Required Value true redirect_uri Optional The URL (encoded) in your app where users will be sent after authorization. Code retrieval On user approval, Quarters will redirect user to redirect_uri with following code as query params: Query param Description code Temporary code to retrieve access token Refresh token POST https://api.pocketfulofquarters/v1/oauth/token with following parameters: Parameter Description grant_type Required Value authorization_code code Required Value from step 2 client_id Required The APP ID you received after registering your application client_secret Required The APP_KEY you received after registering your application Example request: curl https :// api . pocketfulofquarters . com / v1 / oauth / token \\ -X POST \\ -H Content-Type: application/json;charset=UTF-8 \\ --data-binary { client_id : Lpk5sPrA7P59HFlN7obS , client_secret : 1s4x2v8h3b9ollw1pt2afj8knheamvmvv , grant_type : authorization_code , code : eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJ2R2lMR3Z3UERYVHUzVnlFQlRySmNJdTJhNzAyIiwicmFuZG9tIjoiMDgxMmMxNTAtZDY2NC0xMWU3LTg3Y2UtZjEyMTk1M2I0ZWQxIiwiYXBwSWQiOiJMcGs1c1ByQTdQNTlIRmxON29iUyIsInRva2VuVHlwZSI6Imp3dDphdXRob3JpemF0aW9uX2NvZGUiLCJpYXQiOjE1MTIxMTEwNzcsImV4cCI6MTUxMjExMTEzN30.Jljjd7yjk-cr1uYSq0kSTwCpK8zNq8YGrVk_AQu6u4c } After a successful request, a valid access token will be returned in the response: { client_id : Lpk5sPrA7P59HFlN7obS , refresh_token : d832e7c419869...5918b96 , access_token : eyJhbGciOiJIU...81plg } Info access_token is a short lived token. It will expire in 10 minutes. Use refresh_token to retrieve new access_token . You can know more about refresh_token here: Refresh tokens and access tokens . Access token Use refresh_token to retrieve access_token POST https://api.pocketfulofquarters.com/v1/oauth/token with following parameters: Parameter Description grant_type Required Value refresh_token refresh_token Required Value of refresh_token client_id Required The APP ID you received after registering your application client_secret Required The APP_KEY you received after registering your application curl https :// api . pocketfulofquarters . com / v1 / oauth / token \\ -X POST \\ -H Content-Type: application/json;charset=UTF-8 \\ --data-binary { client_id : Lpk5sPrA7P59HFlN7obS , client_secret : 1s4x2v8h3b9ollw1pt2afj8knheamvmvv , grant_type : refresh_token , refresh_token : eyJhbGciOiJIUzI1Ni....kSTwCpK8zNq8YGrVk_AQu6u4c } After a successful request, a valid access token will be returned in the response: { client_id : Lpk5sPrA7P59HFlN7obS , access_token : eyJhbGciOiJIU...81plg } Make an authenticated API call GET https://api.pocketfulofquarters.com/v1/me with following headers: Parameter Description Authorization Required Format - Bearer access-token Example request: curl https://api.pocketfulofquarters.com/v1/me \\ -H Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJ2R2lMR3Z3UERYVHUzVnlFQlRySmNJdTJhNzAyIiwicmFuZG9tIjoiMWE5Njk3YzAtZDY2NC0xMWU3LTg3Y2UtZjEyMTk1M2I0ZWQxIiwiYXBwSWQiOiJMcGs1c1ByQTdQNTlIRmxON29iUyIsImFkbWluIjpmYWxzZSwiZGV2ZWxvcGVyIjpmYWxzZSwidG9rZW5UeXBlIjoiand0OnVzZXIiLCJpYXQiOjE1MTIxMTExMDgsImV4cCI6MTUxMjExMTcwOH0.PFlJjGoN3xza1Qk3ZIBaOzMPyYbrQvnjyvyvQf81plg Example response: { id : vGiLGvwPDXTu3VyEBTrJcIu2a702 , userId : vGiLGvwPDXTu3VyEBTrJcIu2a702 , displayName : User1 , email : user1@example.com , emailVerified : true } All quarters related APIs are private APIs. Use access_token to access them.","title":"OAuth"},{"location":"apis/oauth/#oauth-apis","text":"OAuth APIS are standard OAuth2 APIs. Authorize URL : https://pocketfulofquarters.com/oauth/authorize Access Token URL : https://api.pocketfulofquarters.com/v1/oauth/token","title":"OAuth APIs"},{"location":"apis/oauth/#authorize","text":"GET https://pocketfulofquarters.com/oauth/authorize?response_type=code client_id=YOUR_CLIENT_ID redirect_uri=YOUR_REDIRECT_URL inline=true Parameters: Parameter Description response_type Required Value code client_id Required The client ID you received after registering your application. inline Required Value true redirect_uri Optional The URL (encoded) in your app where users will be sent after authorization.","title":"Authorize"},{"location":"apis/oauth/#code-retrieval","text":"On user approval, Quarters will redirect user to redirect_uri with following code as query params: Query param Description code Temporary code to retrieve access token","title":"Code retrieval"},{"location":"apis/oauth/#refresh-token","text":"POST https://api.pocketfulofquarters/v1/oauth/token with following parameters: Parameter Description grant_type Required Value authorization_code code Required Value from step 2 client_id Required The APP ID you received after registering your application client_secret Required The APP_KEY you received after registering your application Example request: curl https :// api . pocketfulofquarters . com / v1 / oauth / token \\ -X POST \\ -H Content-Type: application/json;charset=UTF-8 \\ --data-binary { client_id : Lpk5sPrA7P59HFlN7obS , client_secret : 1s4x2v8h3b9ollw1pt2afj8knheamvmvv , grant_type : authorization_code , code : eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJ2R2lMR3Z3UERYVHUzVnlFQlRySmNJdTJhNzAyIiwicmFuZG9tIjoiMDgxMmMxNTAtZDY2NC0xMWU3LTg3Y2UtZjEyMTk1M2I0ZWQxIiwiYXBwSWQiOiJMcGs1c1ByQTdQNTlIRmxON29iUyIsInRva2VuVHlwZSI6Imp3dDphdXRob3JpemF0aW9uX2NvZGUiLCJpYXQiOjE1MTIxMTEwNzcsImV4cCI6MTUxMjExMTEzN30.Jljjd7yjk-cr1uYSq0kSTwCpK8zNq8YGrVk_AQu6u4c } After a successful request, a valid access token will be returned in the response: { client_id : Lpk5sPrA7P59HFlN7obS , refresh_token : d832e7c419869...5918b96 , access_token : eyJhbGciOiJIU...81plg } Info access_token is a short lived token. It will expire in 10 minutes. Use refresh_token to retrieve new access_token . You can know more about refresh_token here: Refresh tokens and access tokens .","title":"Refresh token"},{"location":"apis/oauth/#access-token","text":"Use refresh_token to retrieve access_token POST https://api.pocketfulofquarters.com/v1/oauth/token with following parameters: Parameter Description grant_type Required Value refresh_token refresh_token Required Value of refresh_token client_id Required The APP ID you received after registering your application client_secret Required The APP_KEY you received after registering your application curl https :// api . pocketfulofquarters . com / v1 / oauth / token \\ -X POST \\ -H Content-Type: application/json;charset=UTF-8 \\ --data-binary { client_id : Lpk5sPrA7P59HFlN7obS , client_secret : 1s4x2v8h3b9ollw1pt2afj8knheamvmvv , grant_type : refresh_token , refresh_token : eyJhbGciOiJIUzI1Ni....kSTwCpK8zNq8YGrVk_AQu6u4c } After a successful request, a valid access token will be returned in the response: { client_id : Lpk5sPrA7P59HFlN7obS , access_token : eyJhbGciOiJIU...81plg }","title":"Access token"},{"location":"apis/oauth/#make-an-authenticated-api-call","text":"GET https://api.pocketfulofquarters.com/v1/me with following headers: Parameter Description Authorization Required Format - Bearer access-token Example request: curl https://api.pocketfulofquarters.com/v1/me \\ -H Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJ2R2lMR3Z3UERYVHUzVnlFQlRySmNJdTJhNzAyIiwicmFuZG9tIjoiMWE5Njk3YzAtZDY2NC0xMWU3LTg3Y2UtZjEyMTk1M2I0ZWQxIiwiYXBwSWQiOiJMcGs1c1ByQTdQNTlIRmxON29iUyIsImFkbWluIjpmYWxzZSwiZGV2ZWxvcGVyIjpmYWxzZSwidG9rZW5UeXBlIjoiand0OnVzZXIiLCJpYXQiOjE1MTIxMTExMDgsImV4cCI6MTUxMjExMTcwOH0.PFlJjGoN3xza1Qk3ZIBaOzMPyYbrQvnjyvyvQf81plg Example response: { id : vGiLGvwPDXTu3VyEBTrJcIu2a702 , userId : vGiLGvwPDXTu3VyEBTrJcIu2a702 , displayName : User1 , email : user1@example.com , emailVerified : true } All quarters related APIs are private APIs. Use access_token to access them.","title":"Make an authenticated API call"},{"location":"apis/transfer-requests/","text":"Transfer request APIs Quarters allows you to create transfer requests and provide a way to ask users for approval. Typical flow for transfer requests: Create a \"transfer request\". It generates a requestId . It requires user access_token for given user. User approves or declines the request manually on Quarters user-interface (UI). And quarters server will handle transfers. Create transfer request for user POST https://api.pocketfulofquarters/v1/requests with following parameters: Parameter Description tokens Required Number of quarters to transfer description Optional Transfer description - will be shown on screen while user approval appId Required The APP ID you received after registering your application with following headers: Parameter Description Authorization Required Format - Bearer access_token Request example: curl https :// api . pocketfulofquarters / v1 / requests \\ -X POST \\ -H Authorization: Bearer eyJhbGciOiJIU...vyvQf81plg \\ -H Content-Type: application/json;charset=UTF-8 \\ --data-binary { tokens : 10, description : Power ups , appId : Lpk5sPrA7P59HFlN7obS } Response example: { id : 01be8a20-04bb-11e8-94b8-91a2ba7c5972 , tokens : 10 , appId : Lpk5sPrA7P59HFlN7obS , appAddress : 0x1e2aa0184dcde9502568593d6c5da68966a3275a , embedCode : 01be8a20-04bb-11e8-94b8-91a2ba7c5972 , description : Power ups , type : transfer , endpoint : /v1/requests/01be8a20-04bb-11e8-94b8-91a2ba7c5972 , created : {}, userId : Lpk5sPrA7P59HFlN7obS } Authorization You can redirect to following URL to get approval from user. URL to Authorize transfer https://pocketfulofquarters.com/requests/{request_id}?inline=true firebase_token=foo...bar URL params Description request_id Required Request id from step 1 firebase_token Optional Firebase token only for guest users Response fields will be in query params in case of redirection, and window.onQuartersCallback in case of iframe. Response fields: Field Description txId Ethereum transaction hash of quarters transfers requestId Transfer request id Transfer quarters (Available only for server-to-server) POST https://api.pocketfulofquarters.com/v1/accounts/{app-account-address}/transfer with following url params: Url params Description app-account-address Required App account address. An address which you received after app registrations with following headers: Parameter Description Authorization Required Bearer SERVER-API-KEY Server API key which you received after app registrations with following parameters: Parameter Description amount Required Number of quarters to transfer user or address Required User id or user account's valid address Request example: curl https :// api . pocketfulofquarters / v1 / accounts / 0x898 .. . 89 / transfer \\ -X POST \\ -H Authorization: Bearer eyJhbGciOiJIU...vyvQf81plg \\ -H Content-Type: application/json;charset=UTF-8 \\ --data-binary { amount :10, user : Lpk5sPrA7P59HFlN7obS } Response example: { requestId : 01be8a20-04bb-11e8-94b8-91a2ba7c5972 , txId : 0xd832e7c419869...5918b96 } This will yield following response: Field Description txId Ethereum transaction hash of quarters transfers Auto Approve Transfer Request For Users Note: At this moment Transfer Auto Approval is not available for everyone, please contact support if you would like to use it. Note 2: Before trying to auto approve a transfer request for a user. Make sure that the user has approved a normal transaction in prior to your auto approval request. POST https://api.pocketfulofquarters/v1/requests/ request_id /autoApprove with following parameters: Parameter Description clientId Required The APP ID you received after registering your application userId Required User ID of the user that you are trying to auto approve the request for address Required User account's valid address with following headers: Parameter Description Authorization Required Format - Bearer access_token Request example: curl https :// api . pocketfulofquarters / v1 / requests / request_id / autoApprove \\ -X POST \\ -H Authorization: Bearer eyJhbGciOiJIU...vyvQf81plg \\ -H Content-Type: application/json;charset=UTF-8 \\ --data-binary { clientId : 1c6vP7wNNKkXGxUPBc7k , userId : eXa0wTZAelWozJ5l7spJwfPrgU42 , address : 0x2a36ee4bb7be5a66865812693f44d407c3dbe603 } Response example: { requestId : 01be8a20-04bb-11e8-94b8-91a2ba7c5972 , txId : 0xd832e7c419869...5918b96 }","title":"Transfers"},{"location":"apis/transfer-requests/#transfer-request-apis","text":"Quarters allows you to create transfer requests and provide a way to ask users for approval. Typical flow for transfer requests: Create a \"transfer request\". It generates a requestId . It requires user access_token for given user. User approves or declines the request manually on Quarters user-interface (UI). And quarters server will handle transfers.","title":"Transfer request APIs"},{"location":"apis/transfer-requests/#create-transfer-request-for-user","text":"POST https://api.pocketfulofquarters/v1/requests with following parameters: Parameter Description tokens Required Number of quarters to transfer description Optional Transfer description - will be shown on screen while user approval appId Required The APP ID you received after registering your application with following headers: Parameter Description Authorization Required Format - Bearer access_token Request example: curl https :// api . pocketfulofquarters / v1 / requests \\ -X POST \\ -H Authorization: Bearer eyJhbGciOiJIU...vyvQf81plg \\ -H Content-Type: application/json;charset=UTF-8 \\ --data-binary { tokens : 10, description : Power ups , appId : Lpk5sPrA7P59HFlN7obS } Response example: { id : 01be8a20-04bb-11e8-94b8-91a2ba7c5972 , tokens : 10 , appId : Lpk5sPrA7P59HFlN7obS , appAddress : 0x1e2aa0184dcde9502568593d6c5da68966a3275a , embedCode : 01be8a20-04bb-11e8-94b8-91a2ba7c5972 , description : Power ups , type : transfer , endpoint : /v1/requests/01be8a20-04bb-11e8-94b8-91a2ba7c5972 , created : {}, userId : Lpk5sPrA7P59HFlN7obS }","title":"Create transfer request for user"},{"location":"apis/transfer-requests/#authorization","text":"You can redirect to following URL to get approval from user. URL to Authorize transfer https://pocketfulofquarters.com/requests/{request_id}?inline=true firebase_token=foo...bar URL params Description request_id Required Request id from step 1 firebase_token Optional Firebase token only for guest users Response fields will be in query params in case of redirection, and window.onQuartersCallback in case of iframe. Response fields: Field Description txId Ethereum transaction hash of quarters transfers requestId Transfer request id","title":"Authorization"},{"location":"apis/transfer-requests/#transfer-quarters-available-only-for-server-to-server","text":"POST https://api.pocketfulofquarters.com/v1/accounts/{app-account-address}/transfer with following url params: Url params Description app-account-address Required App account address. An address which you received after app registrations with following headers: Parameter Description Authorization Required Bearer SERVER-API-KEY Server API key which you received after app registrations with following parameters: Parameter Description amount Required Number of quarters to transfer user or address Required User id or user account's valid address Request example: curl https :// api . pocketfulofquarters / v1 / accounts / 0x898 .. . 89 / transfer \\ -X POST \\ -H Authorization: Bearer eyJhbGciOiJIU...vyvQf81plg \\ -H Content-Type: application/json;charset=UTF-8 \\ --data-binary { amount :10, user : Lpk5sPrA7P59HFlN7obS } Response example: { requestId : 01be8a20-04bb-11e8-94b8-91a2ba7c5972 , txId : 0xd832e7c419869...5918b96 } This will yield following response: Field Description txId Ethereum transaction hash of quarters transfers","title":"Transfer quarters (Available only for server-to-server)"},{"location":"apis/transfer-requests/#auto-approve-transfer-request-for-users","text":"Note: At this moment Transfer Auto Approval is not available for everyone, please contact support if you would like to use it. Note 2: Before trying to auto approve a transfer request for a user. Make sure that the user has approved a normal transaction in prior to your auto approval request. POST https://api.pocketfulofquarters/v1/requests/ request_id /autoApprove with following parameters: Parameter Description clientId Required The APP ID you received after registering your application userId Required User ID of the user that you are trying to auto approve the request for address Required User account's valid address with following headers: Parameter Description Authorization Required Format - Bearer access_token Request example: curl https :// api . pocketfulofquarters / v1 / requests / request_id / autoApprove \\ -X POST \\ -H Authorization: Bearer eyJhbGciOiJIU...vyvQf81plg \\ -H Content-Type: application/json;charset=UTF-8 \\ --data-binary { clientId : 1c6vP7wNNKkXGxUPBc7k , userId : eXa0wTZAelWozJ5l7spJwfPrgU42 , address : 0x2a36ee4bb7be5a66865812693f44d407c3dbe603 } Response example: { requestId : 01be8a20-04bb-11e8-94b8-91a2ba7c5972 , txId : 0xd832e7c419869...5918b96 }","title":"Auto Approve Transfer Request For Users"},{"location":"apis/user/","text":"User APIs User details GET https://api.pocketfulofquarters.com/v1/me with following headers: Parameter Description Authorization Required Format - Bearer access_token It's a private API and only be accessible with access_token . Check out Oauth APIs to know how to retrieve access_token . Example request: curl https://api.pocketfulofquarters.com/v1/me \\ -H Authorization: Bearer eyJhbGci...YbrQvnjyvyvQf81plg Example response: { id : vGiLGvwPDXTu3VyEBTrJcIu2a702 , userId : vGiLGvwPDXTu3VyEBTrJcIu2a702 , displayName : User1 , email : user1@example.com , emailVerified : true } Accounts GET https://api.pocketfulofquarters.com/v1/accounts with following headers: Parameter Description Authorization Required Format - Bearer access_token Currently response will have only one account in account list. Example request: curl https://api.pocketfulofquarters.com/v1/accounts \\ -H Authorization: Bearer eyJhbGciOiJIU...vyvQf81plg Example response: [ { id : 0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359 , address : 0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359 , created : November 29, 2017 at 5:25:14 AM , userId : vGiLGvwPDXTu3VyEBTrJcIu2a702 } ] Account balance GET https://api.pocketfulofquarters.com/v1/accounts/{account-address}/balance with following url params: Url params Description account-address Required Account address. It must be valid Ethereum address with following headers: Parameter Description Authorization Required Format - Bearer access_token Example request: curl https://api.pocketfulofquarters.com/v1/accounts/0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359/balance \\ -H Authorization: Bearer eyJhbGciOiJIU...vyvQf81plg Example response: [ { quarters : 5000 , formattedQuarters : 5,000 , ethers : 1000000000000000000 , formattedEthers : 1.00 } ] Account reward GET https://api.pocketfulofquarters.com/v1/accounts/{account-address}/rewards with following url params: Url params Description account-address Required Account address. It must be valid Ethereum address with following headers: Parameter Description Authorization Required Format - Bearer access_token Example request: curl https://api.pocketfulofquarters.com/v1/accounts/0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359/rewards \\ -H Authorization: Bearer eyJhbGciOiJIU...vyvQf81plg Example response: [ { rewardAmount : 2000 , rewardAmountFormatted : 2,000 } ] Creating new guest accounts POST https://api.dev.pocketfulofquarters.com/v1/new-guest with following headers: Parameter Description Authorization Required Bearer SERVER-API-KEY Server API key which you received after app registrations Example request: curl https://api.dev.pocketfulofquarters.com/v1/new-guest \\ -H Authorization: Bearer eyJhbGciOiJIU...vyvQf81plg Example response: [ { user_id : 123 , access_token : foo...bar , firebase_token : qux...quux , address : 0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359 } ] Converting guest accounts GET https://dev.pocketfulofquarters.com/guest?response_type=code client_id=YOUR_CLIENT_ID token=GUEST_ACCESS_TOKEN redirect_uri=YOUR_REDIRECT_URL inline=true When redirecting a user to Quarters guest signup page, you'll need to construct the URL with the correct parameters. Here's a list of parameters you should always specify: Parameter Description token Required Guest access token you received after creating the guest user account. response_type Required Value code client_id Required The client ID you received after registering your application. inline Required Value true redirect_uri Optional The URL (encoded) in your app where users will be sent after authorization. Example of a guest signup URL: GET https://dev.pocketfulofquarters.com/guest?response_type=code client_id=Lpk5sPrA7P59HFlN7obS token=foobar inline=true redirect_uri=https%3A%2F%2Fexample.com%2Foauth%2Fcallback Code retrieval On successful guest signup, Quarters will redirect user to redirect_uri with following code as query params: Query param Description code Temporary code to retrieve access token Note: After your users link their guest account with their email and password, you need to retrieve a OAuth Token for them using the code from redirect_uri as the guest tokens gets invalidated.","title":"Users & accounts"},{"location":"apis/user/#user-apis","text":"","title":"User APIs"},{"location":"apis/user/#user-details","text":"GET https://api.pocketfulofquarters.com/v1/me with following headers: Parameter Description Authorization Required Format - Bearer access_token It's a private API and only be accessible with access_token . Check out Oauth APIs to know how to retrieve access_token . Example request: curl https://api.pocketfulofquarters.com/v1/me \\ -H Authorization: Bearer eyJhbGci...YbrQvnjyvyvQf81plg Example response: { id : vGiLGvwPDXTu3VyEBTrJcIu2a702 , userId : vGiLGvwPDXTu3VyEBTrJcIu2a702 , displayName : User1 , email : user1@example.com , emailVerified : true }","title":"User details"},{"location":"apis/user/#accounts","text":"GET https://api.pocketfulofquarters.com/v1/accounts with following headers: Parameter Description Authorization Required Format - Bearer access_token Currently response will have only one account in account list. Example request: curl https://api.pocketfulofquarters.com/v1/accounts \\ -H Authorization: Bearer eyJhbGciOiJIU...vyvQf81plg Example response: [ { id : 0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359 , address : 0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359 , created : November 29, 2017 at 5:25:14 AM , userId : vGiLGvwPDXTu3VyEBTrJcIu2a702 } ]","title":"Accounts"},{"location":"apis/user/#account-balance","text":"GET https://api.pocketfulofquarters.com/v1/accounts/{account-address}/balance with following url params: Url params Description account-address Required Account address. It must be valid Ethereum address with following headers: Parameter Description Authorization Required Format - Bearer access_token Example request: curl https://api.pocketfulofquarters.com/v1/accounts/0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359/balance \\ -H Authorization: Bearer eyJhbGciOiJIU...vyvQf81plg Example response: [ { quarters : 5000 , formattedQuarters : 5,000 , ethers : 1000000000000000000 , formattedEthers : 1.00 } ]","title":"Account balance"},{"location":"apis/user/#account-reward","text":"GET https://api.pocketfulofquarters.com/v1/accounts/{account-address}/rewards with following url params: Url params Description account-address Required Account address. It must be valid Ethereum address with following headers: Parameter Description Authorization Required Format - Bearer access_token Example request: curl https://api.pocketfulofquarters.com/v1/accounts/0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359/rewards \\ -H Authorization: Bearer eyJhbGciOiJIU...vyvQf81plg Example response: [ { rewardAmount : 2000 , rewardAmountFormatted : 2,000 } ]","title":"Account reward"},{"location":"apis/user/#creating-new-guest-accounts","text":"POST https://api.dev.pocketfulofquarters.com/v1/new-guest with following headers: Parameter Description Authorization Required Bearer SERVER-API-KEY Server API key which you received after app registrations Example request: curl https://api.dev.pocketfulofquarters.com/v1/new-guest \\ -H Authorization: Bearer eyJhbGciOiJIU...vyvQf81plg Example response: [ { user_id : 123 , access_token : foo...bar , firebase_token : qux...quux , address : 0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359 } ]","title":"Creating new guest accounts"},{"location":"apis/user/#converting-guest-accounts","text":"GET https://dev.pocketfulofquarters.com/guest?response_type=code client_id=YOUR_CLIENT_ID token=GUEST_ACCESS_TOKEN redirect_uri=YOUR_REDIRECT_URL inline=true When redirecting a user to Quarters guest signup page, you'll need to construct the URL with the correct parameters. Here's a list of parameters you should always specify: Parameter Description token Required Guest access token you received after creating the guest user account. response_type Required Value code client_id Required The client ID you received after registering your application. inline Required Value true redirect_uri Optional The URL (encoded) in your app where users will be sent after authorization. Example of a guest signup URL: GET https://dev.pocketfulofquarters.com/guest?response_type=code client_id=Lpk5sPrA7P59HFlN7obS token=foobar inline=true redirect_uri=https%3A%2F%2Fexample.com%2Foauth%2Fcallback Code retrieval On successful guest signup, Quarters will redirect user to redirect_uri with following code as query params: Query param Description code Temporary code to retrieve access token Note: After your users link their guest account with their email and password, you need to retrieve a OAuth Token for them using the code from redirect_uri as the guest tokens gets invalidated.","title":"Converting guest accounts"},{"location":"guides/create-app/","text":"Create App In this short guide, you'll learn how to create app, how to retrieve app information. To create new app, visit create new app . You will be greeted following screen: App name, description, url and image is required to publish app. This info will be shown to users while authorizing quarters transfer or during OAuth. Once you enter all the information needed and click create new app , you will be greeted with following app details screen with app id ( client_id ), app web secret ( client_web_secret ) and server API key ( client_secret ).","title":"Create App"},{"location":"guides/create-app/#create-app","text":"In this short guide, you'll learn how to create app, how to retrieve app information. To create new app, visit create new app . You will be greeted following screen: App name, description, url and image is required to publish app. This info will be shown to users while authorizing quarters transfer or during OAuth. Once you enter all the information needed and click create new app , you will be greeted with following app details screen with app id ( client_id ), app web secret ( client_web_secret ) and server API key ( client_secret ).","title":"Create App"},{"location":"guides/login-quarters/","text":"Login with Quarters In this short guide, you'll learn how to add Login with Quarters and how to retrieve player details. We are going to use OAuth for authentication. If you want to know more about how OAuth works, check out Digital Ocean's tutorial . Now, let's create simple login functionality and fetch user information from Quarters server. This example uses node server to validate OAuth generated code. Let's start with client side. First add Quarters JavaScript SDK in index.html : script src = https://raw.githubusercontent.com/weiks/quarters-js/master/lib/Quarters.min.js / script Create client using app id and web secret like this: var quarterOptions = { appId : APP_ID , appKey : APP_KEY , quartersURL : https://pocketfulofquarters.com , apiURL : https://api.pocketfulofquarters.com/v1/ } var client = new Quarters ( quarterOptions ); Once user click on login button you can authorize with iframe . Authorizing with user generates temporary code which you can use to generate refresh_token . After receiving refresh_token , you can set refresh_token to setRefreshToken SDK API. client . authorize ( iframe , function ( data ) { var code = data . code // send this code to our node server to validate and generate refresh_token // set refresh_token to client client . setRefreshToken ( refresh_token ). then ( function () { // start using client object to fetch user details }) }) Once you have set refresh_token to client , you can now use client object to fetch user details, create transfer request, etc... Fetch user: client . me (). then ( function ( user ) { // Use user object }) Let's now work on server side. This guide uses express framework for Node server. # Install node SDK npm install --save node-quarters Create quartersClient on server. This uses app secret (Server API key), not app web secret . // Create quarters client var quartersClient = new Quarters ({ appId : APP_ID , appKey : APP_KEY , serverAPIKey : SERVER_API_KEY , address : APP_ETH_ADDRESS , quartersURL : https://pocketfulofquarters.com , apiURL : https://api.pocketfulofquarters.com/v1/ }); Create POST route in express app to generate refresh token using OAuth generated code . // POST route quartersClient . createRefreshToken ( code ). then ( function ( data ) { // get refresh_token (and access_token) and return to UI // data.refresh_token // data.access_token // you can use access_token to fetch user details // quartersClient.fetchUser(access_token) }) Example Here is full example. Client index.html Add Javscript SDK and add login button into index.html . !DOCTYPE html html head .... / head body .... button onclick = login() Login with Quarters / button .... / body !-- jQuery -- script src = https://code.jquery.com/jquery-3.2.1.min.js integrity = sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4= crossorigin = anonymous / script !-- Quarters javascript SDK -- script src = https://raw.githubusercontent.com/weiks/quarters-js/master/lib/Quarters.min.js / script !-- index.js file -- script src = index.js charset = utf-8 / script / html index.js var quarterOptions = { appId : APP_ID , appKey : APP_KEY , quartersURL : https://pocketfulofquarters.com , apiURL : https://api.pocketfulofquarters.com/v1/ } var client = new Quarters ( quarterOptions ); // // On click login // var login = function () { // authorize user to quarters using iframe client . authorize ( iframe , function ( data ) { if ( data . code ) { // fetch refresh token using code $ . ajax ({ url : /code , method : POST , data : JSON . stringify ({ code : data . code }), contentType : application/json , dataType : json }). then ( function ( res ) { // res.refresh_token = you can store into local-storage or cookies // set refresh token to quarters client return client . setRefreshToken ( res . refresh_token ); }). then ( function () { // fetch user details return fetchUserDetails (); }). catch ( function ( e ) { console . log ( e ); }); } }) } // Fetch user details using client after setting refresh_token var fetchUserDetails = function () { return client . me (). then ( function ( user ) { console . log ( user ); }); } Server (Node.js) Install Node SDK npm install --save node-quarters app.js var Quarters = requrie ( node-quarters ); var express = require ( express ); var app = express (); // Create quarters client var quartersClient = new Quarters ({ appId : APP_ID , appKey : APP_KEY , address : APP_ETH_ADDRESS , quartersURL : https://pocketfulofquarters.com , apiURL : https://api.pocketfulofquarters.com/v1/ }); ... ... // POST method route app . post ( /code , function ( req , res ) { var code = req . body . code ; // create refresh token for user and fetch user return quartersClient . createRefreshToken ( code ) . then ( function ( data ) { // get refresh_token var refresh_token = data . refresh_token ; // get access_token var access_token = data . access_token ; // fetch user using access token // quartersClient.fetchUser(access_token); // return tokens to UI return res . json ({ access_token : access_token , refresh_token : refresh_token }); }) . catch ( function ( e ) { return res . status ( 400 ). json ({ message : e . message }) }); });","title":"Login with Quarters (oauth v2)"},{"location":"guides/login-quarters/#login-with-quarters","text":"In this short guide, you'll learn how to add Login with Quarters and how to retrieve player details. We are going to use OAuth for authentication. If you want to know more about how OAuth works, check out Digital Ocean's tutorial . Now, let's create simple login functionality and fetch user information from Quarters server. This example uses node server to validate OAuth generated code. Let's start with client side. First add Quarters JavaScript SDK in index.html : script src = https://raw.githubusercontent.com/weiks/quarters-js/master/lib/Quarters.min.js / script Create client using app id and web secret like this: var quarterOptions = { appId : APP_ID , appKey : APP_KEY , quartersURL : https://pocketfulofquarters.com , apiURL : https://api.pocketfulofquarters.com/v1/ } var client = new Quarters ( quarterOptions ); Once user click on login button you can authorize with iframe . Authorizing with user generates temporary code which you can use to generate refresh_token . After receiving refresh_token , you can set refresh_token to setRefreshToken SDK API. client . authorize ( iframe , function ( data ) { var code = data . code // send this code to our node server to validate and generate refresh_token // set refresh_token to client client . setRefreshToken ( refresh_token ). then ( function () { // start using client object to fetch user details }) }) Once you have set refresh_token to client , you can now use client object to fetch user details, create transfer request, etc... Fetch user: client . me (). then ( function ( user ) { // Use user object }) Let's now work on server side. This guide uses express framework for Node server. # Install node SDK npm install --save node-quarters Create quartersClient on server. This uses app secret (Server API key), not app web secret . // Create quarters client var quartersClient = new Quarters ({ appId : APP_ID , appKey : APP_KEY , serverAPIKey : SERVER_API_KEY , address : APP_ETH_ADDRESS , quartersURL : https://pocketfulofquarters.com , apiURL : https://api.pocketfulofquarters.com/v1/ }); Create POST route in express app to generate refresh token using OAuth generated code . // POST route quartersClient . createRefreshToken ( code ). then ( function ( data ) { // get refresh_token (and access_token) and return to UI // data.refresh_token // data.access_token // you can use access_token to fetch user details // quartersClient.fetchUser(access_token) })","title":"Login with Quarters"},{"location":"guides/login-quarters/#example","text":"Here is full example.","title":"Example"},{"location":"guides/login-quarters/#client","text":"","title":"Client"},{"location":"guides/login-quarters/#indexhtml","text":"Add Javscript SDK and add login button into index.html . !DOCTYPE html html head .... / head body .... button onclick = login() Login with Quarters / button .... / body !-- jQuery -- script src = https://code.jquery.com/jquery-3.2.1.min.js integrity = sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4= crossorigin = anonymous / script !-- Quarters javascript SDK -- script src = https://raw.githubusercontent.com/weiks/quarters-js/master/lib/Quarters.min.js / script !-- index.js file -- script src = index.js charset = utf-8 / script / html","title":"index.html"},{"location":"guides/login-quarters/#indexjs","text":"var quarterOptions = { appId : APP_ID , appKey : APP_KEY , quartersURL : https://pocketfulofquarters.com , apiURL : https://api.pocketfulofquarters.com/v1/ } var client = new Quarters ( quarterOptions ); // // On click login // var login = function () { // authorize user to quarters using iframe client . authorize ( iframe , function ( data ) { if ( data . code ) { // fetch refresh token using code $ . ajax ({ url : /code , method : POST , data : JSON . stringify ({ code : data . code }), contentType : application/json , dataType : json }). then ( function ( res ) { // res.refresh_token = you can store into local-storage or cookies // set refresh token to quarters client return client . setRefreshToken ( res . refresh_token ); }). then ( function () { // fetch user details return fetchUserDetails (); }). catch ( function ( e ) { console . log ( e ); }); } }) } // Fetch user details using client after setting refresh_token var fetchUserDetails = function () { return client . me (). then ( function ( user ) { console . log ( user ); }); }","title":"index.js"},{"location":"guides/login-quarters/#server-nodejs","text":"","title":"Server (Node.js)"},{"location":"guides/login-quarters/#install-node-sdk","text":"npm install --save node-quarters","title":"Install Node SDK"},{"location":"guides/login-quarters/#appjs","text":"var Quarters = requrie ( node-quarters ); var express = require ( express ); var app = express (); // Create quarters client var quartersClient = new Quarters ({ appId : APP_ID , appKey : APP_KEY , address : APP_ETH_ADDRESS , quartersURL : https://pocketfulofquarters.com , apiURL : https://api.pocketfulofquarters.com/v1/ }); ... ... // POST method route app . post ( /code , function ( req , res ) { var code = req . body . code ; // create refresh token for user and fetch user return quartersClient . createRefreshToken ( code ) . then ( function ( data ) { // get refresh_token var refresh_token = data . refresh_token ; // get access_token var access_token = data . access_token ; // fetch user using access token // quartersClient.fetchUser(access_token); // return tokens to UI return res . json ({ access_token : access_token , refresh_token : refresh_token }); }) . catch ( function ( e ) { return res . status ( 400 ). json ({ message : e . message }) }); });","title":"app.js"},{"location":"guides/transfer-quarters/","text":"Transfer quarters as reward or refund In this short guide, you'll learn how to transfer quarters as reward or refund to users. Once users log in, let's transfer them 2 quarters as login reward. We are going to use OAuth for authentication. If you want to know more about how OAuth works, check out Digital Ocean's tutorial . If you want to know how to add Login with Quarters in your app, checkout our guide here . Let's start with client side. First add Quarters JavaScript SDK in index.html : script src = https://raw.githubusercontent.com/weiks/quarters-js/master/lib/Quarters.min.js / script Create client using app id and web secret like this: var quarterOptions = { appId : APP_ID , appKey : APP_KEY , quartersURL : https://pocketfulofquarters.com , apiURL : https://api.pocketfulofquarters.com/v1/ } var client = new Quarters ( quarterOptions ); Once user click on login button you can authorize with iframe . Authorizing with user generates temporary code which you can use to generate refresh_token . client . authorize ( iframe , function ( data ) { var code = data . code // send this code to our node server to validate and generate refresh_token // on successful validation of code, transfer 2 quarters to user }) Let's now work on server side. This guide uses express framework for Node server. # Install node SDK npm install --save node-quarters Create quartersClient on server. This uses app secret (Server API key), not app web secret . // Create quarters client var quartersClient = new Quarters ({ appId : APP_ID , appKey : APP_KEY , serverAPIKey : SERVER_API_KEY , address : APP_ETH_ADDRESS , quartersURL : https://pocketfulofquarters.com , apiURL : https://api.pocketfulofquarters.com/v1/ }); Create POST route in express app to generate refresh token using OAuth generated code . // POST route quartersClient . createRefreshToken ( code ). then ( function ( data ) { // get refresh_token (and access_token) and return to UI // data.refresh_token // data.access_token // you can use access_token to fetch user details return quartersClient . fetchUser ( access_token ). then ( function ( user ) { // let s transfer 2 quarters to user return quartersClient . transferQuarters ({ user : user . id , // user id amount : 2 // 2 quarters }) . then ( function ( data ) { // data.txId = Ethereum transaction hash }) }) }) Example Here is full example. Client index.html Add Javscript SDK and add login button into index.html . !DOCTYPE html html head .... / head body .... button onclick = login() Login with Quarters / button .... / body !-- jQuery -- script src = https://code.jquery.com/jquery-3.2.1.min.js integrity = sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4= crossorigin = anonymous / script !-- Quarters javascript SDK -- script src = https://raw.githubusercontent.com/weiks/quarters-js/master/lib/Quarters.min.js / script !-- index.js file -- script src = index.js charset = utf-8 / script / html index.js var quarterOptions = { appId : APP_ID , appKey : APP_KEY , quartersURL : https://pocketfulofquarters.com , apiURL : https://api.pocketfulofquarters.com/v1/ } var client = new Quarters ( quarterOptions ); // // On click login // var login = function () { // authorize user to quarters using iframe client . authorize ( iframe , function ( data ) { if ( data . code ) { // fetch refresh token using code $ . ajax ({ url : /code , method : POST , data : JSON . stringify ({ code : data . code }), contentType : application/json , dataType : json }). then ( function ( res ) { // res.refresh_token = you can store into local-storage or cookies // set refresh token to quarters client return client . setRefreshToken ( res . refresh_token ); }). catch ( function ( e ) { console . log ( e ); }); } }) } Server (Node.js) Install Node SDK npm install --save node-quarters app.js var Quarters = requrie ( node-quarters ); var express = require ( express ); var app = express (); // Create quarters client var quartersClient = new Quarters ({ appId : APP_ID , appKey : APP_KEY , address : APP_ETH_ADDRESS , quartersURL : https://pocketfulofquarters.com , apiURL : https://api.pocketfulofquarters.com/v1/ }); ... ... // POST method route app . post ( /code , function ( req , res ) { var code = req . body . code ; // create refresh token for user and fetch user return quartersClient . createRefreshToken ( code ) . then ( function ( data ) { // get refresh_token var refresh_token = data . refresh_token ; // get access_token var access_token = data . access_token ; // fetch user using access token return quartersClient . fetchUser ( access_token ). then ( function ( user ) { // transfer 2 quarters to user return quartersClient . transferQuarters ({ user : user . id , amount : 2 // amount to transfer }). then ( function () { res . json ({ success : true }); }) }) }) . catch ( function ( e ) { return res . status ( 400 ). json ({ message : e . message }) }); });","title":"Transfer quarters"},{"location":"guides/transfer-quarters/#transfer-quarters-as-reward-or-refund","text":"In this short guide, you'll learn how to transfer quarters as reward or refund to users. Once users log in, let's transfer them 2 quarters as login reward. We are going to use OAuth for authentication. If you want to know more about how OAuth works, check out Digital Ocean's tutorial . If you want to know how to add Login with Quarters in your app, checkout our guide here . Let's start with client side. First add Quarters JavaScript SDK in index.html : script src = https://raw.githubusercontent.com/weiks/quarters-js/master/lib/Quarters.min.js / script Create client using app id and web secret like this: var quarterOptions = { appId : APP_ID , appKey : APP_KEY , quartersURL : https://pocketfulofquarters.com , apiURL : https://api.pocketfulofquarters.com/v1/ } var client = new Quarters ( quarterOptions ); Once user click on login button you can authorize with iframe . Authorizing with user generates temporary code which you can use to generate refresh_token . client . authorize ( iframe , function ( data ) { var code = data . code // send this code to our node server to validate and generate refresh_token // on successful validation of code, transfer 2 quarters to user }) Let's now work on server side. This guide uses express framework for Node server. # Install node SDK npm install --save node-quarters Create quartersClient on server. This uses app secret (Server API key), not app web secret . // Create quarters client var quartersClient = new Quarters ({ appId : APP_ID , appKey : APP_KEY , serverAPIKey : SERVER_API_KEY , address : APP_ETH_ADDRESS , quartersURL : https://pocketfulofquarters.com , apiURL : https://api.pocketfulofquarters.com/v1/ }); Create POST route in express app to generate refresh token using OAuth generated code . // POST route quartersClient . createRefreshToken ( code ). then ( function ( data ) { // get refresh_token (and access_token) and return to UI // data.refresh_token // data.access_token // you can use access_token to fetch user details return quartersClient . fetchUser ( access_token ). then ( function ( user ) { // let s transfer 2 quarters to user return quartersClient . transferQuarters ({ user : user . id , // user id amount : 2 // 2 quarters }) . then ( function ( data ) { // data.txId = Ethereum transaction hash }) }) })","title":"Transfer quarters as reward or refund"},{"location":"guides/transfer-quarters/#example","text":"Here is full example.","title":"Example"},{"location":"guides/transfer-quarters/#client","text":"","title":"Client"},{"location":"guides/transfer-quarters/#indexhtml","text":"Add Javscript SDK and add login button into index.html . !DOCTYPE html html head .... / head body .... button onclick = login() Login with Quarters / button .... / body !-- jQuery -- script src = https://code.jquery.com/jquery-3.2.1.min.js integrity = sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4= crossorigin = anonymous / script !-- Quarters javascript SDK -- script src = https://raw.githubusercontent.com/weiks/quarters-js/master/lib/Quarters.min.js / script !-- index.js file -- script src = index.js charset = utf-8 / script / html","title":"index.html"},{"location":"guides/transfer-quarters/#indexjs","text":"var quarterOptions = { appId : APP_ID , appKey : APP_KEY , quartersURL : https://pocketfulofquarters.com , apiURL : https://api.pocketfulofquarters.com/v1/ } var client = new Quarters ( quarterOptions ); // // On click login // var login = function () { // authorize user to quarters using iframe client . authorize ( iframe , function ( data ) { if ( data . code ) { // fetch refresh token using code $ . ajax ({ url : /code , method : POST , data : JSON . stringify ({ code : data . code }), contentType : application/json , dataType : json }). then ( function ( res ) { // res.refresh_token = you can store into local-storage or cookies // set refresh token to quarters client return client . setRefreshToken ( res . refresh_token ); }). catch ( function ( e ) { console . log ( e ); }); } }) }","title":"index.js"},{"location":"guides/transfer-quarters/#server-nodejs","text":"","title":"Server (Node.js)"},{"location":"guides/transfer-quarters/#install-node-sdk","text":"npm install --save node-quarters","title":"Install Node SDK"},{"location":"guides/transfer-quarters/#appjs","text":"var Quarters = requrie ( node-quarters ); var express = require ( express ); var app = express (); // Create quarters client var quartersClient = new Quarters ({ appId : APP_ID , appKey : APP_KEY , address : APP_ETH_ADDRESS , quartersURL : https://pocketfulofquarters.com , apiURL : https://api.pocketfulofquarters.com/v1/ }); ... ... // POST method route app . post ( /code , function ( req , res ) { var code = req . body . code ; // create refresh token for user and fetch user return quartersClient . createRefreshToken ( code ) . then ( function ( data ) { // get refresh_token var refresh_token = data . refresh_token ; // get access_token var access_token = data . access_token ; // fetch user using access token return quartersClient . fetchUser ( access_token ). then ( function ( user ) { // transfer 2 quarters to user return quartersClient . transferQuarters ({ user : user . id , amount : 2 // amount to transfer }). then ( function () { res . json ({ success : true }); }) }) }) . catch ( function ( e ) { return res . status ( 400 ). json ({ message : e . message }) }); });","title":"app.js"},{"location":"oauth/integrating/","text":"Integrating Quarters OAuth with your web game apps Before integrating Quarters OAuth, you'll need to register a new OAuth2 application under your profile . If you're using a previous OAuth2 implementation, you may need to configure the following settings: Authorize URL : https://pocketfulofquarters.com/oauth/authorize Access Token URL : https://pocketfulofquarters.com/oauth/token Warning Quarters is still in beta. API may change in stable version. To integrate your third-party web server application with Quarters, use the following flow: 1. Redirect users to request Quarters access GET https://pocketfulofquarters.com/oauth/authorize?response_type=code client_id=YOUR_CLIENT_ID redirect_uri=YOUR_REDIRECT_URL inline=true When redirecting a user to Quarters to authorize access to your application, you'll need to construct the authorization URL with the correct parameters. Here's a list of parameters you should always specify: Parameter Description response_type Required Value code client_id Required The client ID you received after registering your application. inline Required Value true redirect_uri Optional The URL (encoded) in your app where users will be sent after authorization. Example of an authorization URL: GET https://pocketfulofquarters.com/oauth/authorize?response_type=code client_id=Lpk5sPrA7P59HFlN7obS inline=true redirect_uri=https%3A%2F%2Fexample.com%2Foauth%2Fcallback 2. Quarters redirects back to your site If the user approves your application, Quarters will redirect them back to your redirect_uri with a temporary code parameter. Example of the redirect: GET https://example.com/oauth/callback?success=true code=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJ2R2lMR3Z3UERYVHUzVnlFQlRySmNJdTJhNzAyIiwicmFuZG9tIjoiNmFkODI2ZjAtZDY1ZS0xMWU3LTg3Y2UtZjEyMTk1M2I0ZWQxIiwiYXBwSWQiOiJMcGs1c1ByQTdQNTlIRmxON29iUyIsInRva2VuVHlwZSI6Imp3dDphdXRob3JpemF0aW9uX2NvZGUiLCJpYXQiOjE1MTIxMDg2NjYsImV4cCI6MTUxMjEwODcyNn0.Pwl3Mt_RN5Qut5VpCshP32FkZ_lES84PrDnzIGDG8J0 OAuth2 Redirect URI For added security, all redirect_uri must use SSL (i.e. begin with https:// ). URIs without SSL can only be used for development and testing and will not be supported in production. 3. Exchange code for an access token After you have received the temporary code, you can exchange it for valid access and refresh tokens. This can be done by making a POST call: POST https://api.pocketfulofquarters/v1/oauth/token With following parameters: Parameter Description grant_type Required Value authorization_code code Required Value from step 2 client_id Required The app ID you received after registering your application client_secret Required The web secret you received after registering your application Example request: curl https :// api . pocketfulofquarters . com / v1 / oauth / token \\ -X POST \\ -H Content-Type: application/json;charset=UTF-8 \\ --data-binary { client_id : Lpk5sPrA7P59HFlN7obS , client_secret : 1s4x2v8h3b9ollw1pt2afj8knheamvmvv , grant_type : authorization_code , code : eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJ2R2lMR3Z3UERYVHUzVnlFQlRySmNJdTJhNzAyIiwicmFuZG9tIjoiMDgxMmMxNTAtZDY2NC0xMWU3LTg3Y2UtZjEyMTk1M2I0ZWQxIiwiYXBwSWQiOiJMcGs1c1ByQTdQNTlIRmxON29iUyIsInRva2VuVHlwZSI6Imp3dDphdXRob3JpemF0aW9uX2NvZGUiLCJpYXQiOjE1MTIxMTEwNzcsImV4cCI6MTUxMjExMTEzN30.Jljjd7yjk-cr1uYSq0kSTwCpK8zNq8YGrVk_AQu6u4c } After a successful request, a valid access token will be returned in the response: { client_id : Lpk5sPrA7P59HFlN7obS , refresh_token : d832e7c419869...5918b96 , access_token : eyJhbGciOiJIU...81plg } 4. Make an API call After you have a valid access token, you can make your first API call: curl https://api.pocketfulofquarters.com/v1/me \\ -H Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJ2R2lMR3Z3UERYVHUzVnlFQlRySmNJdTJhNzAyIiwicmFuZG9tIjoiMWE5Njk3YzAtZDY2NC0xMWU3LTg3Y2UtZjEyMTk1M2I0ZWQxIiwiYXBwSWQiOiJMcGs1c1ByQTdQNTlIRmxON29iUyIsImFkbWluIjpmYWxzZSwiZGV2ZWxvcGVyIjpmYWxzZSwidG9rZW5UeXBlIjoiand0OnVzZXIiLCJpYXQiOjE1MTIxMTExMDgsImV4cCI6MTUxMjExMTcwOH0.PFlJjGoN3xza1Qk3ZIBaOzMPyYbrQvnjyvyvQf81plg Example response: { id : vGiLGvwPDXTu3VyEBTrJcIu2a702 , userId : vGiLGvwPDXTu3VyEBTrJcIu2a702 , displayName : User1 , email : user1@example.com , emailVerified : true }","title":"Integrating"},{"location":"oauth/integrating/#integrating-quarters-oauth-with-your-web-game-apps","text":"Before integrating Quarters OAuth, you'll need to register a new OAuth2 application under your profile . If you're using a previous OAuth2 implementation, you may need to configure the following settings: Authorize URL : https://pocketfulofquarters.com/oauth/authorize Access Token URL : https://pocketfulofquarters.com/oauth/token Warning Quarters is still in beta. API may change in stable version. To integrate your third-party web server application with Quarters, use the following flow:","title":"Integrating Quarters OAuth with your web game apps"},{"location":"oauth/integrating/#1-redirect-users-to-request-quarters-access","text":"GET https://pocketfulofquarters.com/oauth/authorize?response_type=code client_id=YOUR_CLIENT_ID redirect_uri=YOUR_REDIRECT_URL inline=true When redirecting a user to Quarters to authorize access to your application, you'll need to construct the authorization URL with the correct parameters. Here's a list of parameters you should always specify: Parameter Description response_type Required Value code client_id Required The client ID you received after registering your application. inline Required Value true redirect_uri Optional The URL (encoded) in your app where users will be sent after authorization. Example of an authorization URL: GET https://pocketfulofquarters.com/oauth/authorize?response_type=code client_id=Lpk5sPrA7P59HFlN7obS inline=true redirect_uri=https%3A%2F%2Fexample.com%2Foauth%2Fcallback","title":"1. Redirect users to request Quarters access"},{"location":"oauth/integrating/#2-quarters-redirects-back-to-your-site","text":"If the user approves your application, Quarters will redirect them back to your redirect_uri with a temporary code parameter. Example of the redirect: GET https://example.com/oauth/callback?success=true code=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJ2R2lMR3Z3UERYVHUzVnlFQlRySmNJdTJhNzAyIiwicmFuZG9tIjoiNmFkODI2ZjAtZDY1ZS0xMWU3LTg3Y2UtZjEyMTk1M2I0ZWQxIiwiYXBwSWQiOiJMcGs1c1ByQTdQNTlIRmxON29iUyIsInRva2VuVHlwZSI6Imp3dDphdXRob3JpemF0aW9uX2NvZGUiLCJpYXQiOjE1MTIxMDg2NjYsImV4cCI6MTUxMjEwODcyNn0.Pwl3Mt_RN5Qut5VpCshP32FkZ_lES84PrDnzIGDG8J0 OAuth2 Redirect URI For added security, all redirect_uri must use SSL (i.e. begin with https:// ). URIs without SSL can only be used for development and testing and will not be supported in production.","title":"2. Quarters redirects back to your site"},{"location":"oauth/integrating/#3-exchange-code-for-an-access-token","text":"After you have received the temporary code, you can exchange it for valid access and refresh tokens. This can be done by making a POST call: POST https://api.pocketfulofquarters/v1/oauth/token With following parameters: Parameter Description grant_type Required Value authorization_code code Required Value from step 2 client_id Required The app ID you received after registering your application client_secret Required The web secret you received after registering your application Example request: curl https :// api . pocketfulofquarters . com / v1 / oauth / token \\ -X POST \\ -H Content-Type: application/json;charset=UTF-8 \\ --data-binary { client_id : Lpk5sPrA7P59HFlN7obS , client_secret : 1s4x2v8h3b9ollw1pt2afj8knheamvmvv , grant_type : authorization_code , code : eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJ2R2lMR3Z3UERYVHUzVnlFQlRySmNJdTJhNzAyIiwicmFuZG9tIjoiMDgxMmMxNTAtZDY2NC0xMWU3LTg3Y2UtZjEyMTk1M2I0ZWQxIiwiYXBwSWQiOiJMcGs1c1ByQTdQNTlIRmxON29iUyIsInRva2VuVHlwZSI6Imp3dDphdXRob3JpemF0aW9uX2NvZGUiLCJpYXQiOjE1MTIxMTEwNzcsImV4cCI6MTUxMjExMTEzN30.Jljjd7yjk-cr1uYSq0kSTwCpK8zNq8YGrVk_AQu6u4c } After a successful request, a valid access token will be returned in the response: { client_id : Lpk5sPrA7P59HFlN7obS , refresh_token : d832e7c419869...5918b96 , access_token : eyJhbGciOiJIU...81plg }","title":"3. Exchange code for an access token"},{"location":"oauth/integrating/#4-make-an-api-call","text":"After you have a valid access token, you can make your first API call: curl https://api.pocketfulofquarters.com/v1/me \\ -H Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJ2R2lMR3Z3UERYVHUzVnlFQlRySmNJdTJhNzAyIiwicmFuZG9tIjoiMWE5Njk3YzAtZDY2NC0xMWU3LTg3Y2UtZjEyMTk1M2I0ZWQxIiwiYXBwSWQiOiJMcGs1c1ByQTdQNTlIRmxON29iUyIsImFkbWluIjpmYWxzZSwiZGV2ZWxvcGVyIjpmYWxzZSwidG9rZW5UeXBlIjoiand0OnVzZXIiLCJpYXQiOjE1MTIxMTExMDgsImV4cCI6MTUxMjExMTcwOH0.PFlJjGoN3xza1Qk3ZIBaOzMPyYbrQvnjyvyvQf81plg Example response: { id : vGiLGvwPDXTu3VyEBTrJcIu2a702 , userId : vGiLGvwPDXTu3VyEBTrJcIu2a702 , displayName : User1 , email : user1@example.com , emailVerified : true }","title":"4. Make an API call"},{"location":"oauth/introduction/","text":"Quarters OAuth The Quarters API allows developers to use the OAuth2 protocol to allow a Quarters user to grant a 3rd party application full or partial access to his/her account, without sharing the account's API key or login credentials. It is a slightly more complex integration than the API Key authentication method, but is more flexible. OAuth2 works well for web applications, as well as desktop and mobile apps. \u00bb Get started integrating Quarters OAuth to your application","title":"Introduction"},{"location":"oauth/introduction/#quarters-oauth","text":"The Quarters API allows developers to use the OAuth2 protocol to allow a Quarters user to grant a 3rd party application full or partial access to his/her account, without sharing the account's API key or login credentials. It is a slightly more complex integration than the API Key authentication method, but is more flexible. OAuth2 works well for web applications, as well as desktop and mobile apps. \u00bb Get started integrating Quarters OAuth to your application","title":"Quarters OAuth"},{"location":"oauth/refresh-tokens/","text":"Access tokens and Refresh tokens Quarters uses security feature of OAuth2 called refresh tokens. When you first authenticate, your app will be given an access_token and a refresh_token . The access token is used to authenticate all your requests, but expires in 10 minutes. Once an access token has expired, you will need to use the refresh token to obtain a new access token and a new refresh token. The refresh token never expires but it can only be exchanged once for a new set of access and refresh tokens. If you try to make a call with an expired access token, a 401 response will be returned. This process adds some complexity for Quarters Connect integrations, but provides an valuable layer of security since a compromised access token is automatically revoked after 10 minutes. To get a new access token, you'll need to do a POST request to /oauth/token just like before, but this time you must include your refresh_token and change the grant_type to refresh_token . curl https://api.pocketfulofquarters.com/v1/oauth/token \\ -X POST \\ -d grant_type=refresh_token client_id=YOUR_APP_ID client_secret=YOUR_WEB_SECRET refresh_token=REFRESH_TOKEN The expected result is a response containing the access token, as before: { client_id : ... , access_token : ... , refresh_token : ... } Note: If you are using an OAuth2 library that supports refresh tokens, you\u2019re in luck - the library will automatically take care of these details.","title":"Refresh tokens"},{"location":"oauth/refresh-tokens/#access-tokens-and-refresh-tokens","text":"Quarters uses security feature of OAuth2 called refresh tokens. When you first authenticate, your app will be given an access_token and a refresh_token . The access token is used to authenticate all your requests, but expires in 10 minutes. Once an access token has expired, you will need to use the refresh token to obtain a new access token and a new refresh token. The refresh token never expires but it can only be exchanged once for a new set of access and refresh tokens. If you try to make a call with an expired access token, a 401 response will be returned. This process adds some complexity for Quarters Connect integrations, but provides an valuable layer of security since a compromised access token is automatically revoked after 10 minutes. To get a new access token, you'll need to do a POST request to /oauth/token just like before, but this time you must include your refresh_token and change the grant_type to refresh_token . curl https://api.pocketfulofquarters.com/v1/oauth/token \\ -X POST \\ -d grant_type=refresh_token client_id=YOUR_APP_ID client_secret=YOUR_WEB_SECRET refresh_token=REFRESH_TOKEN The expected result is a response containing the access token, as before: { client_id : ... , access_token : ... , refresh_token : ... } Note: If you are using an OAuth2 library that supports refresh tokens, you\u2019re in luck - the library will automatically take care of these details.","title":"Access tokens and Refresh tokens"},{"location":"sdk/js/","text":"JavaScript SDK JavaScript SDK provides helpers for Quarters APIs and OAuth2. It requires appId ( client_id ) and app_key . The first thing you'll need to do is sign up for Quarters to create an app . Warning Do not use server_api_key (Server API Key). Anyone can see parameters passed to JavaScript SDK as it will be used on browser. Features Support for both API Key + Secret and OAuth 2 authentication. Convenient methods for making calls to the API. Automatic parsing of API responses into relevant JavaScript objects. Installation script src = https://raw.githubusercontent.com/weiks/quarters-js/master/lib/Quarters.min.js / script Using npm npm install --save quarters-js # Quarters = require( Quarters ) Get started Create client using app_id and app_key . var client = new Quarters ({ appId : APP_ID , appKey : APP_KEY , quartersURL : https://pocketfulofquarters.com , apiURL : https://api.pocketfulofquarters.com/v1/ }); OAuth APIs If you're writing code that will act on behalf of another user, start by creating a new OAuth2 application. You will need to do some work to obtain OAuth credentials for your players; please refer to our OAuth 2 tutorial and documentation . Authorize user through Quarters. client . authorize ( iframe , function ( data ) { // data.code = temporary auth code }) If you have code through authorize , you can get refresh_token and access_token using setAuthCode method. This method also set refresh_token in client client . setAuthCode ( code ). then ( function ( data ) { // data.refresh_token = refresh token for client // data.access_token = access token for subsequent APIs calls // ... // .... // start making API calls }) Warning Setting code directly through SDK without validating at server is not safe. Use this method only for web-only applications. For server based applications, use server (Node SDK or APIs) to validate and get refresh_token and access_token from quarters server. Then, use setRefreshToken to set refresh_token to quarters client object. APIs Set refresh token If you already have refresh_token , you can skip authorize and setAuthCode , and set refresh token to client by calling setRefreshToken . client . setRefreshToken ( refreshToken ). then ( function () { // ... // .... // start making API calls }) Player details Once you have set refresh_token using setAuthCode or setRefreshToken , you can fetch player details and other player data. client . me (). then ( function ( player ) { console . log ( player ) }) Account details Fetch player account details. client . getAccount (). then ( function ( account ) { console . log ( account ) // account.address = ETH address for player }) Balance details Fetch player balance details. client . getBalance (). then ( function ( balance ) { console . log ( balance ) // balance.quarters = Number of quarters player has // balance.formattedQuarters = formatted quarters to show on UI }) Transfer request When you want a player to transfer quarters while playing game. You can create a transfer request ; it creates a new requestId and then, you can ask the player to authorize the transfer. client . requestTransfer ({ tokens : 10 , // 10 quarters description : Power ups // transfer description }) . then ( function ( request ) { // request related details console . log ( request ) // add iframe on the page and ask player to authorize transfer client . authorizeTransfer ( request . id , iframe , function ( data ) { if ( data . error ) { // data.message } else if ( data . cancel ) { // player canceled transfer } else { // data.txId = Ethereum transaction tx id // data.requestId = Request Id to get details about order (/v1/requests/:requestId) } }) }) Info You can use Quarters Buttons to get txId and requestId without creating requestTransfer and authorizeTransfer . In much complex apps, this might comes handy. Examples web-only app var client = new Quarters ({ appId : APP_ID , appKey : APP_KEY , quartersURL : https://pocketfulofquarters.com , apiURL : https://api.pocketfulofquarters.com/v1/ }); client . authorize ( iframe , function ( data ) { if ( data . error ) { // show alert (data.message contains error message) } else if ( data . code ) { client . setAuthCode ( code ). then ( function () { // get refresh token and store into local storage/cookie (optional) var refreshToken = client . getRefreshToken (); window . localStorage . setItem ( quarters-refresh-token , refreshToken ); // ... // fetch details // ... }); } }); // if you have refresh token already in storage or cookie var refreshToken = window . localStorage . getItem (); if ( refreshToken ) { client . setRefreshToken ( refreshToken ). then ( function () { // ... // fetch player details // ... }); }","title":"JavaScript (client)"},{"location":"sdk/js/#javascript-sdk","text":"JavaScript SDK provides helpers for Quarters APIs and OAuth2. It requires appId ( client_id ) and app_key . The first thing you'll need to do is sign up for Quarters to create an app . Warning Do not use server_api_key (Server API Key). Anyone can see parameters passed to JavaScript SDK as it will be used on browser.","title":"JavaScript SDK"},{"location":"sdk/js/#features","text":"Support for both API Key + Secret and OAuth 2 authentication. Convenient methods for making calls to the API. Automatic parsing of API responses into relevant JavaScript objects.","title":"Features"},{"location":"sdk/js/#installation","text":"script src = https://raw.githubusercontent.com/weiks/quarters-js/master/lib/Quarters.min.js / script Using npm npm install --save quarters-js # Quarters = require( Quarters )","title":"Installation"},{"location":"sdk/js/#get-started","text":"Create client using app_id and app_key . var client = new Quarters ({ appId : APP_ID , appKey : APP_KEY , quartersURL : https://pocketfulofquarters.com , apiURL : https://api.pocketfulofquarters.com/v1/ });","title":"Get started"},{"location":"sdk/js/#oauth-apis","text":"If you're writing code that will act on behalf of another user, start by creating a new OAuth2 application. You will need to do some work to obtain OAuth credentials for your players; please refer to our OAuth 2 tutorial and documentation . Authorize user through Quarters. client . authorize ( iframe , function ( data ) { // data.code = temporary auth code }) If you have code through authorize , you can get refresh_token and access_token using setAuthCode method. This method also set refresh_token in client client . setAuthCode ( code ). then ( function ( data ) { // data.refresh_token = refresh token for client // data.access_token = access token for subsequent APIs calls // ... // .... // start making API calls }) Warning Setting code directly through SDK without validating at server is not safe. Use this method only for web-only applications. For server based applications, use server (Node SDK or APIs) to validate and get refresh_token and access_token from quarters server. Then, use setRefreshToken to set refresh_token to quarters client object.","title":"OAuth APIs"},{"location":"sdk/js/#apis","text":"","title":"APIs"},{"location":"sdk/js/#set-refresh-token","text":"If you already have refresh_token , you can skip authorize and setAuthCode , and set refresh token to client by calling setRefreshToken . client . setRefreshToken ( refreshToken ). then ( function () { // ... // .... // start making API calls })","title":"Set refresh token"},{"location":"sdk/js/#player-details","text":"Once you have set refresh_token using setAuthCode or setRefreshToken , you can fetch player details and other player data. client . me (). then ( function ( player ) { console . log ( player ) })","title":"Player details"},{"location":"sdk/js/#account-details","text":"Fetch player account details. client . getAccount (). then ( function ( account ) { console . log ( account ) // account.address = ETH address for player })","title":"Account details"},{"location":"sdk/js/#balance-details","text":"Fetch player balance details. client . getBalance (). then ( function ( balance ) { console . log ( balance ) // balance.quarters = Number of quarters player has // balance.formattedQuarters = formatted quarters to show on UI })","title":"Balance details"},{"location":"sdk/js/#transfer-request","text":"When you want a player to transfer quarters while playing game. You can create a transfer request ; it creates a new requestId and then, you can ask the player to authorize the transfer. client . requestTransfer ({ tokens : 10 , // 10 quarters description : Power ups // transfer description }) . then ( function ( request ) { // request related details console . log ( request ) // add iframe on the page and ask player to authorize transfer client . authorizeTransfer ( request . id , iframe , function ( data ) { if ( data . error ) { // data.message } else if ( data . cancel ) { // player canceled transfer } else { // data.txId = Ethereum transaction tx id // data.requestId = Request Id to get details about order (/v1/requests/:requestId) } }) }) Info You can use Quarters Buttons to get txId and requestId without creating requestTransfer and authorizeTransfer . In much complex apps, this might comes handy.","title":"Transfer request"},{"location":"sdk/js/#examples","text":"","title":"Examples"},{"location":"sdk/js/#web-only-app","text":"var client = new Quarters ({ appId : APP_ID , appKey : APP_KEY , quartersURL : https://pocketfulofquarters.com , apiURL : https://api.pocketfulofquarters.com/v1/ }); client . authorize ( iframe , function ( data ) { if ( data . error ) { // show alert (data.message contains error message) } else if ( data . code ) { client . setAuthCode ( code ). then ( function () { // get refresh token and store into local storage/cookie (optional) var refreshToken = client . getRefreshToken (); window . localStorage . setItem ( quarters-refresh-token , refreshToken ); // ... // fetch details // ... }); } }); // if you have refresh token already in storage or cookie var refreshToken = window . localStorage . getItem (); if ( refreshToken ) { client . setRefreshToken ( refreshToken ). then ( function () { // ... // fetch player details // ... }); }","title":"web-only app"},{"location":"sdk/node/","text":"Node SDK Node SDK provides helpers for Quarters APIs and OAuth2. It requires appId ( client_id ) and app_secret (Server API key). The first thing you'll need to do is sign up for Quarters to create an app . Features Support for both API Key + Secret and OAuth 2 authentication. Convenient methods for making calls to the API. Automatic parsing of API responses into relevant JavaScript objects. Installation npm install --save node-quarters Get started Create a client - var client = new Quarters ({ appId : APP_ID , appKey : APP_KEY , serverAPIKey : SERVER_API_KEY , address : options . address , // Your ethereum account address (from app page) quartersURL : https://pocketfulofquarters.com , apiURL : https://api.pocketfulofquarters.com/v1/ }); OAuth APIs You will need to do some work to obtain OAuth credentials for your players; please refer to our OAuth 2 tutorial and documentation . Validate code and fetch refresh_token and access_token client . createRefreshToken ( code ). then ( function ( data ) { // data.refresh_token // data.access_token // // send to UI // }) APIs Create access token If you already have refresh_token , you can generate access_token for player. client . createAccessToken ( refreshToken ). then ( function ( data ) { // data.access_token // ... // .... }) Player details Once you have access_token , you can fetch user details and user related other informations. client . fetchUser ( accessToken ). then ( function ( user ) { console . log ( user ) }) Transfer quarters to player (reward and refund) client . transferQuarters ({ user : USER - ID , // user id amount : 10 // 10 quarters }). then ( function ( data ) { // data.txId = Ethereum transaction hash of quarters transfers }); Examples server based apps // On node server var client = new Quarters ({ key : APP_ID , webSecret : APP_KEY , // Server API key secret : SERVER_API_KEY , address : APP_ETH_ADDRESS , quartersURL : https://pocketfulofquarters.com , apiURL : https://api.pocketfulofquarters.com/v1/ }); // Validate code and fetch refresh token for user client . createRefreshToken ( code ). then ( function ( data ) { // fetch user details return client . fetchUser ( data . access_token ) }). then ( function ( user ) { var userId = user . id ; }) // refund/reward player the quarters client . transferQuarters ({ user : userId , amount : 10 }). then ( function ( data ) { // data.txId = transaction id })","title":"Node (server)"},{"location":"sdk/node/#node-sdk","text":"Node SDK provides helpers for Quarters APIs and OAuth2. It requires appId ( client_id ) and app_secret (Server API key). The first thing you'll need to do is sign up for Quarters to create an app .","title":"Node SDK"},{"location":"sdk/node/#features","text":"Support for both API Key + Secret and OAuth 2 authentication. Convenient methods for making calls to the API. Automatic parsing of API responses into relevant JavaScript objects.","title":"Features"},{"location":"sdk/node/#installation","text":"npm install --save node-quarters","title":"Installation"},{"location":"sdk/node/#get-started","text":"Create a client - var client = new Quarters ({ appId : APP_ID , appKey : APP_KEY , serverAPIKey : SERVER_API_KEY , address : options . address , // Your ethereum account address (from app page) quartersURL : https://pocketfulofquarters.com , apiURL : https://api.pocketfulofquarters.com/v1/ });","title":"Get started"},{"location":"sdk/node/#oauth-apis","text":"You will need to do some work to obtain OAuth credentials for your players; please refer to our OAuth 2 tutorial and documentation . Validate code and fetch refresh_token and access_token client . createRefreshToken ( code ). then ( function ( data ) { // data.refresh_token // data.access_token // // send to UI // })","title":"OAuth APIs"},{"location":"sdk/node/#apis","text":"","title":"APIs"},{"location":"sdk/node/#create-access-token","text":"If you already have refresh_token , you can generate access_token for player. client . createAccessToken ( refreshToken ). then ( function ( data ) { // data.access_token // ... // .... })","title":"Create access token"},{"location":"sdk/node/#player-details","text":"Once you have access_token , you can fetch user details and user related other informations. client . fetchUser ( accessToken ). then ( function ( user ) { console . log ( user ) })","title":"Player details"},{"location":"sdk/node/#transfer-quarters-to-player-reward-and-refund","text":"client . transferQuarters ({ user : USER - ID , // user id amount : 10 // 10 quarters }). then ( function ( data ) { // data.txId = Ethereum transaction hash of quarters transfers });","title":"Transfer quarters to player (reward and refund)"},{"location":"sdk/node/#examples","text":"","title":"Examples"},{"location":"sdk/node/#server-based-apps","text":"// On node server var client = new Quarters ({ key : APP_ID , webSecret : APP_KEY , // Server API key secret : SERVER_API_KEY , address : APP_ETH_ADDRESS , quartersURL : https://pocketfulofquarters.com , apiURL : https://api.pocketfulofquarters.com/v1/ }); // Validate code and fetch refresh token for user client . createRefreshToken ( code ). then ( function ( data ) { // fetch user details return client . fetchUser ( data . access_token ) }). then ( function ( user ) { var userId = user . id ; }) // refund/reward player the quarters client . transferQuarters ({ user : userId , amount : 10 }). then ( function ( data ) { // data.txId = transaction id })","title":"server based apps"},{"location":"sdk/unity-playfab-iap/","text":"Quarters Unity SDK - PlayFab In App Purchases Module PlayFab Module allows very simple way for the user to purchase Quarters using platform native In App Purchases process Videos Make sure to check out our step-by-step SDK setup videos on our Youtube channel Supported platforms : iOS Prerequisites: QuartersPlayFabModule correctly configured and PlayFab Title configured. If you haven't done this step install QuartersSDK/Modules/PlayFab/PlayFabModule.unitypackage and follow the documentation. Unity IAP Package https://docs.unity3d.com/Manual/UnityIAPSettingUp.html For iOS: iTunes Connect account with valid \"Paid Applications\" agreements. This step is critical for testing and validating purchases iTunes Connect App setup with added IAP Consumable products Installation: Import content of QuartersSDK/Modules/PlayFab/PlayFabIAPModule.unitypackage to your project Add Unity IAP package to your project Add content of QuartersSDK/Modules/PlayFabIAP/QuartersPlayFabIAPServer.txt to your existing PlayFab Cloud Script. Setup IAP Products on iTunesConnect/ YourApp /Features Requirements for Quarters IAP products (critical, make sure this is configured correctly) Example: Reference Name: 4 Quarters Type: Consumable Product ID: 4Quarters Note: All quarters IAP product IDs MUST follow this naming convention: numberOfQuarters Quarters examples: 4Quarters 8Quarters .. To test IAP Purchases with iOS you don't have to submit Products to review. If \"Paid Applications\" agreements is valid and product is in \"Ready to Submit\" status testing purchases with Apples sandbox server will work. For more information how to test Apple IAP follow this link: https://developer.apple.com/apple-pay/sandbox-testing/ Buying Quarters through PlayFab In App Purchases Module Authorize user with Quarters Call Quarters.Instance.GetUserDetails Login PlayFab user with PlayFab. Example: // login user to playfab title using device id LoginWithCustomIDRequest loginRequest = new LoginWithCustomIDRequest (); loginRequest . CustomId = SystemInfo . deviceUniqueIdentifier ; loginRequest . CreateAccount = true ; PlayFabClientAPI . LoginWithCustomID ( loginRequest , delegate ( LoginResult result ) { Debug.Log( Playfab user logged in : + result . PlayFabId ); } , delegate ( PlayFabError error ) { Debug.LogError(error.ErrorMessage) ; } ); Call QuartersIAP.Initialize - All products data will be pulled from store server Example: QuartersIAP.Instance.Initialize(testProducts, delegate(Product[] products) { //products loaded }, delegate(InitializationFailureReason reason) { Debug.LogError(reason.ToString()); }); You can now call QuartersIAP.Instance.BuyProduct - Native popup will be presented to the user to confirm the purchase. After successful payment Playfab IAP module will validate transaction and automatically transfer quarters to user account. Example: QuartersIAP . Instance . BuyProduct ( QuartersIAP . Instance . products [ 0 ] , ( Product product , string txId ) = { Debug.Log( Purchase complete ) ; } ,( string error ) = { Debug.LogError( Purchase error : + error ); } ); For another example look at Assets/QuartersSDK/Example/Example scene","title":"Unity PlayFab IAP"},{"location":"sdk/unity-playfab-iap/#quarters-unity-sdk-playfab-in-app-purchases-module","text":"PlayFab Module allows very simple way for the user to purchase Quarters using platform native In App Purchases process","title":"Quarters Unity SDK - PlayFab In App Purchases Module"},{"location":"sdk/unity-playfab-iap/#videos","text":"Make sure to check out our step-by-step SDK setup videos on our Youtube channel Supported platforms : iOS","title":"Videos"},{"location":"sdk/unity-playfab-iap/#prerequisites","text":"QuartersPlayFabModule correctly configured and PlayFab Title configured. If you haven't done this step install QuartersSDK/Modules/PlayFab/PlayFabModule.unitypackage and follow the documentation. Unity IAP Package https://docs.unity3d.com/Manual/UnityIAPSettingUp.html For iOS: iTunes Connect account with valid \"Paid Applications\" agreements. This step is critical for testing and validating purchases iTunes Connect App setup with added IAP Consumable products","title":"Prerequisites:"},{"location":"sdk/unity-playfab-iap/#installation","text":"Import content of QuartersSDK/Modules/PlayFab/PlayFabIAPModule.unitypackage to your project Add Unity IAP package to your project Add content of QuartersSDK/Modules/PlayFabIAP/QuartersPlayFabIAPServer.txt to your existing PlayFab Cloud Script. Setup IAP Products on iTunesConnect/ YourApp /Features Requirements for Quarters IAP products (critical, make sure this is configured correctly) Example: Reference Name: 4 Quarters Type: Consumable Product ID: 4Quarters Note: All quarters IAP product IDs MUST follow this naming convention: numberOfQuarters Quarters examples: 4Quarters 8Quarters .. To test IAP Purchases with iOS you don't have to submit Products to review. If \"Paid Applications\" agreements is valid and product is in \"Ready to Submit\" status testing purchases with Apples sandbox server will work. For more information how to test Apple IAP follow this link: https://developer.apple.com/apple-pay/sandbox-testing/ Buying Quarters through PlayFab In App Purchases Module Authorize user with Quarters Call Quarters.Instance.GetUserDetails Login PlayFab user with PlayFab. Example: // login user to playfab title using device id LoginWithCustomIDRequest loginRequest = new LoginWithCustomIDRequest (); loginRequest . CustomId = SystemInfo . deviceUniqueIdentifier ; loginRequest . CreateAccount = true ; PlayFabClientAPI . LoginWithCustomID ( loginRequest , delegate ( LoginResult result ) { Debug.Log( Playfab user logged in : + result . PlayFabId ); } , delegate ( PlayFabError error ) { Debug.LogError(error.ErrorMessage) ; } ); Call QuartersIAP.Initialize - All products data will be pulled from store server Example: QuartersIAP.Instance.Initialize(testProducts, delegate(Product[] products) { //products loaded }, delegate(InitializationFailureReason reason) { Debug.LogError(reason.ToString()); }); You can now call QuartersIAP.Instance.BuyProduct - Native popup will be presented to the user to confirm the purchase. After successful payment Playfab IAP module will validate transaction and automatically transfer quarters to user account. Example: QuartersIAP . Instance . BuyProduct ( QuartersIAP . Instance . products [ 0 ] , ( Product product , string txId ) = { Debug.Log( Purchase complete ) ; } ,( string error ) = { Debug.LogError( Purchase error : + error ); } ); For another example look at Assets/QuartersSDK/Example/Example scene","title":"Installation:"},{"location":"sdk/unity-playfab/","text":"Quarters Unity SDK - PlayFab Module PlayFab Module allows transferring quarters from the Quarters app to the users through PlayFab cloud script. This allows custom logic to be injected to the PlayFab server to verify if transfer request can be authorized. \u00bb Download Quarters Unity SDK. Videos Make sure to check out our step-by-step SDK setup videos on our Youtube channel Prerequisites: PlayFab SDK must be installed prior to module installation (download) . Playfab Title Installation: Import content of QuartersSDK/Modules/PlayFab/PlayFabModule.unitypackage to your project Add QUARTERS_MODULE_PLAYFAB scripting define in Player Settings. If you are supporting more than one platform add QUARTERS_MODULE_PLAYFAB scripting define to each platform tab in Player Settings Open QuartersSDK/Modules/PlayFab/QuartersPlayFabModuleServer.txt , copy SERVER_TOKEN for your Quarters App, copy APP_ADDRESS for your Quarters App (found in Quarters app settings/Edit app ) Example: var SERVER_TOKEN = xk9q9fdxhbu65lyplqhwqe29klduvtoj9izi0g4wgrdy56b1dd32 ; var APP_ADDRESS = 0x1e2aa0184dcde9502568593d6c5da68966a32712 ; Add whatever custom logic you require using JavaScript in QuartersPlayFabModuleServer.txt in the marked section. /* ######## ENTER YOUR CUSTOM LOGIC HERE, BY DEFAULT EVERY AWARD REQUEST IS ACCEPTED */ This step is critical, custom logic MUST be used. Otherwise any client side request will transfer Quarters out from the Quarters app. Copy content of QuartersPlayFabModuleServer.txt to your existing Playfab Cloud Script. If you don't have any existing Cloud Script code you can simply upload QuartersPlayFabModuleServer.txt stright to Automation section in PlayFab console. AwardQuarters Award quarters server call allows transferring quarters from Quarters app to user. It can be called from client side through the cloud script handler as well as directly from another Cloud Script function when Quarters should be awarded to the user. Example 1: In this example user requests 2 quarters to be awarded to him. Typical \"real life\" example would be daily reward for login in to the game. Call is made from the client side to cloud script server. During the AwardQuarters call cloud script checks when last time reward was given to the user. Authorization is for this transaction is granted or declined by Cloud Script. # Client Side using QuartersSDK ; using PlayFab ; using PlayFab . ClientModels ; // login user to playfab title using device id LoginWithCustomIDRequest loginRequest = new LoginWithCustomIDRequest (); loginRequest . CustomId = SystemInfo . deviceUniqueIdentifier ; loginRequest . CreateAccount = true ; PlayFabClientAPI . LoginWithCustomID ( loginRequest , delegate ( LoginResult result ) { Debug.Log( Playfab user logged in : + result.PlayFabId); //Request 2 quarters from Playfab Cloud build Quarters.Instance.AwardQuarters(2, delegate(string transactionHash) { Debug.Log( Quarters awarded : + transactionHash ); } , delegate ( string error ) { Debug.LogError(error) ; } ); } , delegate ( PlayFabError error ) { Debug.LogError(error.ErrorMessage) ; } ); # Cloud Script Side var TRANSFER_URL = https://api.pocketfulofquarters.com ; var SERVER_TOKEN = xk9q9fdxhbu65lyplqhwqe29klduvtoj9izi0g4wgrdy56b1ddle21 ; //ENTER SERVER TOKEN HERE var APP_ADDRESS = 0x1e2aa0184dcde9502568593d6c5da68966a3275adasda ; //ENTER APP ADDRESS HERE //PlayFab Cloud script handler handlers . AwardQuarters = function ( args , context ) { var result = AwardQuarters ( args ); return result ; }; function AwardQuarters ( args ) { var amount = args [ amount ]; var user = args [ userId ]; if ( SERVER_TOKEN == ) { log . error ( Missing SERVER_TOKEN parameter ); return ; } if ( APP_ADDRESS == ) { log . error ( Missing APP_ADDRESS parameter ); return ; } if ( amount == undefined || amount == null ) { log . error ( Missing amount parameter ); return ; } if ( user == undefined || user == null ) { log . error ( Missing user parameter ); return ; } log . info ( Award + amount + quarters to user: + user ); var requestAuthorized = true ; /* ######## ENTER YOUR CUSTOM LOGIC HERE, BY DEFAULT EVERY AWARD REQUEST IS ACCEPTED var shouldReceiveDailyBonus = !DidReceivedBonusToday(userId); //DidReceivedBonusToday could be a custom logic method checking Playfab user data if (shouldReceiveDailyBonus == false) { log.error( Daily bonus already given today ); requestAuthorized = false; } if (amount != DAILY_BONUS_AMOUNT) { log.error( Requested daily bonus amount is incorrect ); requestAuthorized = false; } */ if ( ! requestAuthorized ) return { error : Award Quarters request not authorized by game server }; var postData = { amount : amount , user : user }; var url = TRANSFER_URL + /v1/accounts/ + APP_ADDRESS + /transfer ; var headers = { Authorization : Bearer + SERVER_TOKEN , Content-Type : application/json;charset=UTF-8 }; var contentType = application/json ; var contentBody = JSON . stringify ( postData ); var response = http . request ( url , post , contentBody , contentType , headers ); return response ; }","title":"Unity PlayFab"},{"location":"sdk/unity-playfab/#quarters-unity-sdk-playfab-module","text":"PlayFab Module allows transferring quarters from the Quarters app to the users through PlayFab cloud script. This allows custom logic to be injected to the PlayFab server to verify if transfer request can be authorized. \u00bb Download Quarters Unity SDK.","title":"Quarters Unity SDK - PlayFab Module"},{"location":"sdk/unity-playfab/#videos","text":"Make sure to check out our step-by-step SDK setup videos on our Youtube channel","title":"Videos"},{"location":"sdk/unity-playfab/#prerequisites","text":"PlayFab SDK must be installed prior to module installation (download) . Playfab Title","title":"Prerequisites:"},{"location":"sdk/unity-playfab/#installation","text":"Import content of QuartersSDK/Modules/PlayFab/PlayFabModule.unitypackage to your project Add QUARTERS_MODULE_PLAYFAB scripting define in Player Settings. If you are supporting more than one platform add QUARTERS_MODULE_PLAYFAB scripting define to each platform tab in Player Settings Open QuartersSDK/Modules/PlayFab/QuartersPlayFabModuleServer.txt , copy SERVER_TOKEN for your Quarters App, copy APP_ADDRESS for your Quarters App (found in Quarters app settings/Edit app ) Example: var SERVER_TOKEN = xk9q9fdxhbu65lyplqhwqe29klduvtoj9izi0g4wgrdy56b1dd32 ; var APP_ADDRESS = 0x1e2aa0184dcde9502568593d6c5da68966a32712 ; Add whatever custom logic you require using JavaScript in QuartersPlayFabModuleServer.txt in the marked section. /* ######## ENTER YOUR CUSTOM LOGIC HERE, BY DEFAULT EVERY AWARD REQUEST IS ACCEPTED */ This step is critical, custom logic MUST be used. Otherwise any client side request will transfer Quarters out from the Quarters app. Copy content of QuartersPlayFabModuleServer.txt to your existing Playfab Cloud Script. If you don't have any existing Cloud Script code you can simply upload QuartersPlayFabModuleServer.txt stright to Automation section in PlayFab console.","title":"Installation:"},{"location":"sdk/unity-playfab/#awardquarters","text":"Award quarters server call allows transferring quarters from Quarters app to user. It can be called from client side through the cloud script handler as well as directly from another Cloud Script function when Quarters should be awarded to the user. Example 1: In this example user requests 2 quarters to be awarded to him. Typical \"real life\" example would be daily reward for login in to the game. Call is made from the client side to cloud script server. During the AwardQuarters call cloud script checks when last time reward was given to the user. Authorization is for this transaction is granted or declined by Cloud Script. # Client Side using QuartersSDK ; using PlayFab ; using PlayFab . ClientModels ; // login user to playfab title using device id LoginWithCustomIDRequest loginRequest = new LoginWithCustomIDRequest (); loginRequest . CustomId = SystemInfo . deviceUniqueIdentifier ; loginRequest . CreateAccount = true ; PlayFabClientAPI . LoginWithCustomID ( loginRequest , delegate ( LoginResult result ) { Debug.Log( Playfab user logged in : + result.PlayFabId); //Request 2 quarters from Playfab Cloud build Quarters.Instance.AwardQuarters(2, delegate(string transactionHash) { Debug.Log( Quarters awarded : + transactionHash ); } , delegate ( string error ) { Debug.LogError(error) ; } ); } , delegate ( PlayFabError error ) { Debug.LogError(error.ErrorMessage) ; } ); # Cloud Script Side var TRANSFER_URL = https://api.pocketfulofquarters.com ; var SERVER_TOKEN = xk9q9fdxhbu65lyplqhwqe29klduvtoj9izi0g4wgrdy56b1ddle21 ; //ENTER SERVER TOKEN HERE var APP_ADDRESS = 0x1e2aa0184dcde9502568593d6c5da68966a3275adasda ; //ENTER APP ADDRESS HERE //PlayFab Cloud script handler handlers . AwardQuarters = function ( args , context ) { var result = AwardQuarters ( args ); return result ; }; function AwardQuarters ( args ) { var amount = args [ amount ]; var user = args [ userId ]; if ( SERVER_TOKEN == ) { log . error ( Missing SERVER_TOKEN parameter ); return ; } if ( APP_ADDRESS == ) { log . error ( Missing APP_ADDRESS parameter ); return ; } if ( amount == undefined || amount == null ) { log . error ( Missing amount parameter ); return ; } if ( user == undefined || user == null ) { log . error ( Missing user parameter ); return ; } log . info ( Award + amount + quarters to user: + user ); var requestAuthorized = true ; /* ######## ENTER YOUR CUSTOM LOGIC HERE, BY DEFAULT EVERY AWARD REQUEST IS ACCEPTED var shouldReceiveDailyBonus = !DidReceivedBonusToday(userId); //DidReceivedBonusToday could be a custom logic method checking Playfab user data if (shouldReceiveDailyBonus == false) { log.error( Daily bonus already given today ); requestAuthorized = false; } if (amount != DAILY_BONUS_AMOUNT) { log.error( Requested daily bonus amount is incorrect ); requestAuthorized = false; } */ if ( ! requestAuthorized ) return { error : Award Quarters request not authorized by game server }; var postData = { amount : amount , user : user }; var url = TRANSFER_URL + /v1/accounts/ + APP_ADDRESS + /transfer ; var headers = { Authorization : Bearer + SERVER_TOKEN , Content-Type : application/json;charset=UTF-8 }; var contentType = application/json ; var contentBody = JSON . stringify ( postData ); var response = http . request ( url , post , contentBody , contentType , headers ); return response ; }","title":"AwardQuarters"},{"location":"sdk/unity/","text":"Quarters Unity SDK - v0.20.2 Supported versions : Unity 2017+ Supported platforms : iOS and Android . \u00bb Download Quarters Unity SDK. Videos Make sure to check out our step-by-step SDK setup videos on our Youtube channel Example A sample project to play slots on mobile with Quarters. Configuration Follow Getting Started guide to create your Quarter App. Unity integration Import Quarters SDK from Unity Asset Store , add QuartersSDK/Prefab/QuartersInit.prefab to your first scene, then copy your APP_ID and APP_KEY to QuartersInit inspector. Platform specific setup iOS No platform specific setup is needed for iOS. Deep linking setup is handled automatically by a post process. Click here to watch a video on how to get started with Quarters SDK for iOS in under 3 mins! Android In Unity top menu go Quarters/Android/Generate Android Manifest . Android Manifest will automatically generate enabling deep linking. If your project contain Android Manifest already, manual manifest will be required. Click here to watch a video on how to get started with Quarters SDK for Android! Authorization Before you can use Quarters API you must authorize users session. From version 0.20.0 Quarters Unity SDK support guest mode. This allows to authorize user as guest and give full access to Quarters features. Guest users can be converted to email users through Quarters.SignUp method. This workflow is required by Apple to conform to their user guidelines. Example: using QuartersSDK ; Quarters . Instance . AuthorizeGuest ( OnAuthorizationSuccess , OnAuthorizationFailed ); \u2028 public void OnAuthorizationSuccess () { Debug.Log( OnAuthorizationSuccess ) ; } \u2028\u2028\u2028 public void OnAuthorizationFailed ( string error ) { \u2028 Debug.LogError( OnAuthorizationFailed : + error ); \u2028\u2028 } From this point user is able to buy, spend and get rewarded with Quarters. At some point user should be prompted by the app for signing up to create password protected Quarters account. Only fully signed up users are able to use Quarters account between apps. Example of converting guest user to signed up account: Quarters . Instance . SignUp ( OnAuthorizationSuccess , OnAuthorizationFailed ); public void OnAuthorizationSuccess () { Debug.Log( OnAuthorizationSuccess ) ; } public void OnAuthorizationFailed ( string error ) { Debug.LogError( OnAuthorizationFailed : + error ); } \u2028 Get User Details Get user details can be only called after successful authorization. Success delegate returns User object with basic user details. Example: using QuartersSDK ; Quarters . Instance . GetUserDetails ( delegate ( User user ) { \u2028 Debug.Log( User loaded ) ; \u2028\u2028 } , delegate ( string error ) { \u2028 Debug.LogError( Cannot load the user details : + error ); \u2028\u2028 } ); \u2028\u2028 Get accounts Get account can be only called after successful authorization. On success delegate will be called with a list of user accounts. (Note: only one user account is currently supported by the API) Example: using QuartersSDK; Quarters.Instance.GetAccounts( delegate (List User.Account accounts) {\u2028 //success\u2028 }, delegate (string error) {\u2028 //failed\u2028\u2028 } ); Get Account Balance Get account balance can be only called after successful authorization. On success delegate is fired with User.Account.Balance object Example: using QuartersSDK; Quarters.Instance.GetAccountBalance( delegate (User.Account.Balance balance) {\u2028\u2028}, delegate (string error) {\u2028\u2028 } );\u2028 Transfer Transfer request can be only called after successful authorization. This call allows to charge user quarters that will be transferred to your Quarters app. Transfer request is done through external browser, similar to Authorize call. On Success transaction hash is returned. Please note it can take up to 3 minutes for your transfer to appear. Example: using QuartersSDK; TransferAPIRequest request = new TransferAPIRequest( int.Parse(tokensInput.text), descriptionInput.text, delegate (string transactionHash) {\u2028 //success\u2028\u2028 }, delegate (string error) { //failed\u2028 } );\u2028 transfer\u2028Quarters.Instance.CreateTransfer(request); //start RELEASE NOTES General notes: - only one account is currently supported by API, hence Get Accounts and Account balance calls are working with first returned account 0.20.2 - fixed transfer issues when using guest account 0.20.1 - fixed issue with missing callback when using SignUp 0.20.0 - added guest mode for frictionless authentication 0.12.0 - easier to integrate iOS and Android In App Purchases 0.11.0 - Added Playfab IAP module - Added In App Purchases support for iOS 0.10.0 - Web view support - Authorize and Transfer requests can now be done within the app through webview, not external browser (Supported platforms, iOS, Android, Unity Editor on MacOS) - Optional forceExternalBrowser added to Authorize and Transfer calls (false by default) false 0.9.0 - Sessions persistance added. User will wont have to authorize quarters on every login anymore, only first time. - Added deauthorize functionality to log user out of quarters 0.8.1 - Fixed out of range exception when calling GetAccountBalance right after GetUserDetails 0.8.0 - Added PlayFab module - Supporting Playfab server side Quarters apps to user transfers 0.7.0 - Quarters UI added - Editor scripts are now inheriting from UnityEditor.Editor to avoid potential conflicts with custom Editor namespace 0.6.0 - Added automated Android Manifest Generation in Quarters/Android/Generate Android Manifest - Android package name can now contain uppercase characters 0.5.0 - Deep linking is now dynamic. Multiple apps using Quarters SDK are now supported on single Android or iOS device 0.4.0 - Added URIParser to better deep link parameters handling - Full Transfer support on iOS and Android - Added automated iOS post process builds - iOS deep linking 0.3.0 - added seamless support for GetAccounts call - added seamless support for GetAcdountBalance - basic one way support for Transfering quarters added known issues: - no deep linking with parameters support for TransferRequest. Doe to lack of API support for this functionality. Its coming in next release. 0.2.0 - Added Android deep linking. Quarters SDK will now automatically handle URL schemes - Android support added for oauth calls outside the app - Basic Android Manifest added for handling linking, intents and permissions - Android support for Authorize call - Example - added simple on screen console 0.1.0 - Added simple authorization in editor - Refresh and access token are handled during Authorization - Added GetUserDetails API call with refreshing access token if expired","title":"Unity"},{"location":"sdk/unity/#quarters-unity-sdk-v0202","text":"Supported versions : Unity 2017+ Supported platforms : iOS and Android . \u00bb Download Quarters Unity SDK.","title":"Quarters Unity SDK - v0.20.2"},{"location":"sdk/unity/#videos","text":"Make sure to check out our step-by-step SDK setup videos on our Youtube channel","title":"Videos"},{"location":"sdk/unity/#example","text":"A sample project to play slots on mobile with Quarters.","title":"Example"},{"location":"sdk/unity/#configuration","text":"Follow Getting Started guide to create your Quarter App.","title":"Configuration"},{"location":"sdk/unity/#unity-integration","text":"Import Quarters SDK from Unity Asset Store , add QuartersSDK/Prefab/QuartersInit.prefab to your first scene, then copy your APP_ID and APP_KEY to QuartersInit inspector.","title":"Unity integration"},{"location":"sdk/unity/#platform-specific-setup","text":"","title":"Platform specific setup"},{"location":"sdk/unity/#ios","text":"No platform specific setup is needed for iOS. Deep linking setup is handled automatically by a post process. Click here to watch a video on how to get started with Quarters SDK for iOS in under 3 mins!","title":"iOS"},{"location":"sdk/unity/#android","text":"In Unity top menu go Quarters/Android/Generate Android Manifest . Android Manifest will automatically generate enabling deep linking. If your project contain Android Manifest already, manual manifest will be required. Click here to watch a video on how to get started with Quarters SDK for Android!","title":"Android"},{"location":"sdk/unity/#authorization","text":"Before you can use Quarters API you must authorize users session. From version 0.20.0 Quarters Unity SDK support guest mode. This allows to authorize user as guest and give full access to Quarters features. Guest users can be converted to email users through Quarters.SignUp method. This workflow is required by Apple to conform to their user guidelines. Example: using QuartersSDK ; Quarters . Instance . AuthorizeGuest ( OnAuthorizationSuccess , OnAuthorizationFailed ); \u2028 public void OnAuthorizationSuccess () { Debug.Log( OnAuthorizationSuccess ) ; } \u2028\u2028\u2028 public void OnAuthorizationFailed ( string error ) { \u2028 Debug.LogError( OnAuthorizationFailed : + error ); \u2028\u2028 } From this point user is able to buy, spend and get rewarded with Quarters. At some point user should be prompted by the app for signing up to create password protected Quarters account. Only fully signed up users are able to use Quarters account between apps. Example of converting guest user to signed up account: Quarters . Instance . SignUp ( OnAuthorizationSuccess , OnAuthorizationFailed ); public void OnAuthorizationSuccess () { Debug.Log( OnAuthorizationSuccess ) ; } public void OnAuthorizationFailed ( string error ) { Debug.LogError( OnAuthorizationFailed : + error ); }","title":"Authorization"},{"location":"sdk/unity/#get-user-details","text":"Get user details can be only called after successful authorization. Success delegate returns User object with basic user details. Example: using QuartersSDK ; Quarters . Instance . GetUserDetails ( delegate ( User user ) { \u2028 Debug.Log( User loaded ) ; \u2028\u2028 } , delegate ( string error ) { \u2028 Debug.LogError( Cannot load the user details : + error ); \u2028\u2028 } );","title":"Get User Details"},{"location":"sdk/unity/#get-accounts","text":"Get account can be only called after successful authorization. On success delegate will be called with a list of user accounts. (Note: only one user account is currently supported by the API)","title":"Get accounts"},{"location":"sdk/unity/#example_1","text":"using QuartersSDK; Quarters.Instance.GetAccounts( delegate (List User.Account accounts) {\u2028 //success\u2028 }, delegate (string error) {\u2028 //failed\u2028\u2028 } );","title":"Example:"},{"location":"sdk/unity/#get-account-balance","text":"Get account balance can be only called after successful authorization. On success delegate is fired with User.Account.Balance object Example: using QuartersSDK; Quarters.Instance.GetAccountBalance( delegate (User.Account.Balance balance) {\u2028\u2028}, delegate (string error) {\u2028\u2028 } );","title":"Get Account Balance"},{"location":"sdk/unity/#transfer","text":"Transfer request can be only called after successful authorization. This call allows to charge user quarters that will be transferred to your Quarters app. Transfer request is done through external browser, similar to Authorize call. On Success transaction hash is returned. Please note it can take up to 3 minutes for your transfer to appear. Example: using QuartersSDK; TransferAPIRequest request = new TransferAPIRequest( int.Parse(tokensInput.text), descriptionInput.text, delegate (string transactionHash) {\u2028 //success\u2028\u2028 }, delegate (string error) { //failed\u2028 } );\u2028 transfer\u2028Quarters.Instance.CreateTransfer(request); //start RELEASE NOTES General notes: - only one account is currently supported by API, hence Get Accounts and Account balance calls are working with first returned account","title":"Transfer"}]}